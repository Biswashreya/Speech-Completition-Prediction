{
  "title": "Lec 13: Bipartitie Graphs",
  "source": "NPTEL",
  "course": "Discrete Mathematics by Prof Benny George and  Prof. Sajith Gopalan",
  "transcript": [
    {
      "start": "0:09",
      "end": "0:09",
      "text": "[Music]"
    },
    {
      "start": "0:09",
      "end": "0:12",
      "text": "[Music] you"
    },
    {
      "start": "0:21",
      "end": "0:21",
      "text": "[Music]"
    },
    {
      "start": "0:21",
      "end": "0:29",
      "text": "[Music] you"
    },
    {
      "start": "0:31",
      "end": "0:32",
      "text": "so in this lecture we will learn about"
    },
    {
      "start": "0:32",
      "end": "0:42",
      "text": "so in this lecture we will learn about two things one is about bipartite graphs"
    },
    {
      "start": "0:45",
      "end": "0:45",
      "text": "the second thing is about minimal"
    },
    {
      "start": "0:45",
      "end": "0:55",
      "text": "the second thing is about minimal spanning trees"
    },
    {
      "start": "0:57",
      "end": "0:57",
      "text": "these are the concepts the differently"
    },
    {
      "start": "0:57",
      "end": "1:00",
      "text": "these are the concepts the differently on this lecture let's first define what"
    },
    {
      "start": "1:00",
      "end": "1:00",
      "text": "on this lecture let's first define what"
    },
    {
      "start": "1:00",
      "end": "1:05",
      "text": "on this lecture let's first define what are bipartite graphs in the previous"
    },
    {
      "start": "1:05",
      "end": "1:05",
      "text": "are bipartite graphs in the previous"
    },
    {
      "start": "1:05",
      "end": "1:08",
      "text": "are bipartite graphs in the previous lecture we talked about coloring or"
    },
    {
      "start": "1:08",
      "end": "1:08",
      "text": "lecture we talked about coloring or"
    },
    {
      "start": "1:08",
      "end": "1:11",
      "text": "lecture we talked about coloring or coloring the vertices of a graph graphs"
    },
    {
      "start": "1:11",
      "end": "1:11",
      "text": "coloring the vertices of a graph graphs"
    },
    {
      "start": "1:11",
      "end": "1:15",
      "text": "coloring the vertices of a graph graphs which can be colored using two colors"
    },
    {
      "start": "1:15",
      "end": "1:15",
      "text": "which can be colored using two colors"
    },
    {
      "start": "1:15",
      "end": "1:16",
      "text": "which can be colored using two colors which can be vortex colored using two"
    },
    {
      "start": "1:16",
      "end": "1:16",
      "text": "which can be vortex colored using two"
    },
    {
      "start": "1:16",
      "end": "1:19",
      "text": "which can be vortex colored using two colors are referred to as bipartite"
    },
    {
      "start": "1:19",
      "end": "1:19",
      "text": "colors are referred to as bipartite"
    },
    {
      "start": "1:19",
      "end": "1:23",
      "text": "colors are referred to as bipartite graph so let's write down the definition"
    },
    {
      "start": "1:48",
      "end": "1:48",
      "text": "so if you have any graph and it can be"
    },
    {
      "start": "1:48",
      "end": "1:51",
      "text": "so if you have any graph and it can be colored using two colors these are"
    },
    {
      "start": "1:51",
      "end": "1:51",
      "text": "colored using two colors these are"
    },
    {
      "start": "1:51",
      "end": "1:53",
      "text": "colored using two colors these are called as bipartite graphs and the"
    },
    {
      "start": "1:53",
      "end": "1:53",
      "text": "called as bipartite graphs and the"
    },
    {
      "start": "1:53",
      "end": "1:54",
      "text": "called as bipartite graphs and the reason why they are called bipartite"
    },
    {
      "start": "1:54",
      "end": "1:54",
      "text": "reason why they are called bipartite"
    },
    {
      "start": "1:54",
      "end": "1:55",
      "text": "reason why they are called bipartite graph is because it's naturally splits"
    },
    {
      "start": "1:55",
      "end": "1:55",
      "text": "graph is because it's naturally splits"
    },
    {
      "start": "1:55",
      "end": "1:58",
      "text": "graph is because it's naturally splits into two parts okay so let's say these"
    },
    {
      "start": "1:58",
      "end": "1:58",
      "text": "into two parts okay so let's say these"
    },
    {
      "start": "1:58",
      "end": "2:00",
      "text": "into two parts okay so let's say these are all the vertices getting one color"
    },
    {
      "start": "2:00",
      "end": "2:00",
      "text": "are all the vertices getting one color"
    },
    {
      "start": "2:00",
      "end": "2:03",
      "text": "are all the vertices getting one color so let's call it as color one and these"
    },
    {
      "start": "2:03",
      "end": "2:03",
      "text": "so let's call it as color one and these"
    },
    {
      "start": "2:03",
      "end": "2:05",
      "text": "so let's call it as color one and these are all the vertices getting color two"
    },
    {
      "start": "2:05",
      "end": "2:05",
      "text": "are all the vertices getting color two"
    },
    {
      "start": "2:05",
      "end": "2:08",
      "text": "are all the vertices getting color two now if you look at the edges of the"
    },
    {
      "start": "2:08",
      "end": "2:08",
      "text": "now if you look at the edges of the"
    },
    {
      "start": "2:08",
      "end": "2:12",
      "text": "now if you look at the edges of the graph every edge is of this kind one end"
    },
    {
      "start": "2:12",
      "end": "2:12",
      "text": "graph every edge is of this kind one end"
    },
    {
      "start": "2:12",
      "end": "2:14",
      "text": "graph every edge is of this kind one end is in this particular set let's call it"
    },
    {
      "start": "2:14",
      "end": "2:14",
      "text": "is in this particular set let's call it"
    },
    {
      "start": "2:14",
      "end": "2:16",
      "text": "is in this particular set let's call it this is a and this is B and the other"
    },
    {
      "start": "2:16",
      "end": "2:16",
      "text": "this is a and this is B and the other"
    },
    {
      "start": "2:16",
      "end": "2:20",
      "text": "this is a and this is B and the other edge will be in B okay this is how every"
    },
    {
      "start": "2:20",
      "end": "2:20",
      "text": "edge will be in B okay this is how every"
    },
    {
      "start": "2:20",
      "end": "2:23",
      "text": "edge will be in B okay this is how every bipartite graph would look like one edge"
    },
    {
      "start": "2:23",
      "end": "2:23",
      "text": "bipartite graph would look like one edge"
    },
    {
      "start": "2:23",
      "end": "2:25",
      "text": "bipartite graph would look like one edge in D in one part and the other edge in"
    },
    {
      "start": "2:25",
      "end": "2:25",
      "text": "in D in one part and the other edge in"
    },
    {
      "start": "2:25",
      "end": "2:30",
      "text": "in D in one part and the other edge in the other part because if you had two"
    },
    {
      "start": "2:30",
      "end": "2:30",
      "text": "the other part because if you had two"
    },
    {
      "start": "2:30",
      "end": "2:33",
      "text": "the other part because if you had two vertices in the same part then of course"
    },
    {
      "start": "2:33",
      "end": "2:33",
      "text": "vertices in the same part then of course"
    },
    {
      "start": "2:33",
      "end": "2:35",
      "text": "vertices in the same part then of course these were the colors given to the"
    },
    {
      "start": "2:35",
      "end": "2:35",
      "text": "these were the colors given to the"
    },
    {
      "start": "2:35",
      "end": "2:39",
      "text": "these were the colors given to the graphs and if you had an edge in which"
    },
    {
      "start": "2:39",
      "end": "2:39",
      "text": "graphs and if you had an edge in which"
    },
    {
      "start": "2:39",
      "end": "2:42",
      "text": "graphs and if you had an edge in which both vertices were on one side then that"
    },
    {
      "start": "2:42",
      "end": "2:42",
      "text": "both vertices were on one side then that"
    },
    {
      "start": "2:42",
      "end": "2:44",
      "text": "both vertices were on one side then that would essentially mean that that edge is"
    },
    {
      "start": "2:44",
      "end": "2:44",
      "text": "would essentially mean that that edge is"
    },
    {
      "start": "2:44",
      "end": "2:47",
      "text": "would essentially mean that that edge is not properly colored its endpoints"
    },
    {
      "start": "2:47",
      "end": "2:47",
      "text": "not properly colored its endpoints"
    },
    {
      "start": "2:47",
      "end": "2:49",
      "text": "not properly colored its endpoints received the same color so that's not"
    },
    {
      "start": "2:49",
      "end": "2:49",
      "text": "received the same color so that's not"
    },
    {
      "start": "2:49",
      "end": "2:53",
      "text": "received the same color so that's not allowed so bipartite graphs are"
    },
    {
      "start": "2:53",
      "end": "2:53",
      "text": "allowed so bipartite graphs are"
    },
    {
      "start": "2:53",
      "end": "2:57",
      "text": "allowed so bipartite graphs are essentially two colorable graphs now we"
    },
    {
      "start": "2:57",
      "end": "2:57",
      "text": "essentially two colorable graphs now we"
    },
    {
      "start": "2:57",
      "end": "2:58",
      "text": "essentially two colorable graphs now we will give an alternate characterization"
    },
    {
      "start": "2:58",
      "end": "2:58",
      "text": "will give an alternate characterization"
    },
    {
      "start": "2:58",
      "end": "3:01",
      "text": "will give an alternate characterization to bipartite graphs we write it as a"
    },
    {
      "start": "3:01",
      "end": "3:01",
      "text": "to bipartite graphs we write it as a"
    },
    {
      "start": "3:01",
      "end": "3:08",
      "text": "to bipartite graphs we write it as a theorem and we'll prove it a graph is"
    },
    {
      "start": "3:08",
      "end": "3:08",
      "text": "theorem and we'll prove it a graph is"
    },
    {
      "start": "3:08",
      "end": "3:20",
      "text": "theorem and we'll prove it a graph is bipartite if and only if it contains"
    },
    {
      "start": "3:31",
      "end": "3:31",
      "text": "no cycles of odd lengths and you look at"
    },
    {
      "start": "3:31",
      "end": "3:33",
      "text": "no cycles of odd lengths and you look at all the cycles in the graph if none of"
    },
    {
      "start": "3:33",
      "end": "3:33",
      "text": "all the cycles in the graph if none of"
    },
    {
      "start": "3:33",
      "end": "3:36",
      "text": "all the cycles in the graph if none of those cycles are of odd lengths then it"
    },
    {
      "start": "3:36",
      "end": "3:36",
      "text": "those cycles are of odd lengths then it"
    },
    {
      "start": "3:36",
      "end": "3:39",
      "text": "those cycles are of odd lengths then it will invariably be a bipartite graph"
    },
    {
      "start": "3:39",
      "end": "3:39",
      "text": "will invariably be a bipartite graph"
    },
    {
      "start": "3:39",
      "end": "3:42",
      "text": "will invariably be a bipartite graph okay and if you take a bipartite graph"
    },
    {
      "start": "3:42",
      "end": "3:42",
      "text": "okay and if you take a bipartite graph"
    },
    {
      "start": "3:42",
      "end": "3:45",
      "text": "okay and if you take a bipartite graph that cannot contain any cycles of odd"
    },
    {
      "start": "3:45",
      "end": "3:45",
      "text": "that cannot contain any cycles of odd"
    },
    {
      "start": "3:45",
      "end": "3:46",
      "text": "that cannot contain any cycles of odd lengths"
    },
    {
      "start": "3:46",
      "end": "3:46",
      "text": "lengths"
    },
    {
      "start": "3:46",
      "end": "3:59",
      "text": "lengths let's try and prove this theorem"
    },
    {
      "start": "4:02",
      "end": "4:02",
      "text": "the One Direction is easy suppose let's"
    },
    {
      "start": "4:02",
      "end": "4:14",
      "text": "the One Direction is easy suppose let's just imagine that there is an odd cycle"
    },
    {
      "start": "4:15",
      "end": "4:15",
      "text": "suppose this is one particular cycle in"
    },
    {
      "start": "4:15",
      "end": "4:20",
      "text": "suppose this is one particular cycle in the graph cycle of odd having odd number"
    },
    {
      "start": "4:20",
      "end": "4:20",
      "text": "the graph cycle of odd having odd number"
    },
    {
      "start": "4:20",
      "end": "4:25",
      "text": "the graph cycle of odd having odd number of edges now suppose this graph was"
    },
    {
      "start": "4:25",
      "end": "4:25",
      "text": "of edges now suppose this graph was"
    },
    {
      "start": "4:25",
      "end": "4:26",
      "text": "of edges now suppose this graph was colorable then all these vertices would"
    },
    {
      "start": "4:26",
      "end": "4:26",
      "text": "colorable then all these vertices would"
    },
    {
      "start": "4:26",
      "end": "4:30",
      "text": "colorable then all these vertices would have gotten some color so if you take"
    },
    {
      "start": "4:30",
      "end": "4:30",
      "text": "have gotten some color so if you take"
    },
    {
      "start": "4:30",
      "end": "4:32",
      "text": "have gotten some color so if you take this what is one of these vertex start"
    },
    {
      "start": "4:32",
      "end": "4:32",
      "text": "this what is one of these vertex start"
    },
    {
      "start": "4:32",
      "end": "4:34",
      "text": "this what is one of these vertex start at any vertex if you give color one to"
    },
    {
      "start": "4:34",
      "end": "4:34",
      "text": "at any vertex if you give color one to"
    },
    {
      "start": "4:34",
      "end": "4:37",
      "text": "at any vertex if you give color one to this its neighbors must surely get a"
    },
    {
      "start": "4:37",
      "end": "4:37",
      "text": "this its neighbors must surely get a"
    },
    {
      "start": "4:37",
      "end": "4:39",
      "text": "this its neighbors must surely get a different color so this must be of color"
    },
    {
      "start": "4:39",
      "end": "4:39",
      "text": "different color so this must be of color"
    },
    {
      "start": "4:39",
      "end": "4:40",
      "text": "different color so this must be of color too"
    },
    {
      "start": "4:40",
      "end": "4:40",
      "text": "too"
    },
    {
      "start": "4:40",
      "end": "4:44",
      "text": "too there's no other option and this what"
    },
    {
      "start": "4:44",
      "end": "4:44",
      "text": "there's no other option and this what"
    },
    {
      "start": "4:44",
      "end": "4:46",
      "text": "there's no other option and this what the next vertex should be of color one"
    },
    {
      "start": "4:46",
      "end": "4:46",
      "text": "the next vertex should be of color one"
    },
    {
      "start": "4:46",
      "end": "4:48",
      "text": "the next vertex should be of color one and the next should be two and the next"
    },
    {
      "start": "4:48",
      "end": "4:48",
      "text": "and the next should be two and the next"
    },
    {
      "start": "4:48",
      "end": "4:51",
      "text": "and the next should be two and the next should again be one and that would cause"
    },
    {
      "start": "4:51",
      "end": "4:51",
      "text": "should again be one and that would cause"
    },
    {
      "start": "4:51",
      "end": "4:58",
      "text": "should again be one and that would cause this particular edge to be colored in"
    },
    {
      "start": "4:58",
      "end": "4:58",
      "text": "this particular edge to be colored in"
    },
    {
      "start": "4:58",
      "end": "5:00",
      "text": "this particular edge to be colored in such a way that both its vertices have"
    },
    {
      "start": "5:00",
      "end": "5:01",
      "text": "such a way that both its vertices have"
    },
    {
      "start": "5:01",
      "end": "5:02",
      "text": "such a way that both its vertices have the same color so that's not a valid"
    },
    {
      "start": "5:02",
      "end": "5:02",
      "text": "the same color so that's not a valid"
    },
    {
      "start": "5:02",
      "end": "5:05",
      "text": "the same color so that's not a valid coloring so this would happen in any odd"
    },
    {
      "start": "5:05",
      "end": "5:05",
      "text": "coloring so this would happen in any odd"
    },
    {
      "start": "5:05",
      "end": "5:07",
      "text": "coloring so this would happen in any odd length cycle if you have a cycle of odd"
    },
    {
      "start": "5:07",
      "end": "5:07",
      "text": "length cycle if you have a cycle of odd"
    },
    {
      "start": "5:07",
      "end": "5:09",
      "text": "length cycle if you have a cycle of odd lengths you start at any vertex by the"
    },
    {
      "start": "5:09",
      "end": "5:09",
      "text": "lengths you start at any vertex by the"
    },
    {
      "start": "5:09",
      "end": "5:12",
      "text": "lengths you start at any vertex by the time you reach back to the vertex you"
    },
    {
      "start": "5:12",
      "end": "5:12",
      "text": "time you reach back to the vertex you"
    },
    {
      "start": "5:12",
      "end": "5:14",
      "text": "time you reach back to the vertex you will see that as the colors have to"
    },
    {
      "start": "5:14",
      "end": "5:14",
      "text": "will see that as the colors have to"
    },
    {
      "start": "5:14",
      "end": "5:17",
      "text": "will see that as the colors have to alternate the last edge cannot be"
    },
    {
      "start": "5:17",
      "end": "5:17",
      "text": "alternate the last edge cannot be"
    },
    {
      "start": "5:17",
      "end": "5:20",
      "text": "alternate the last edge cannot be colored properly okay so odd length"
    },
    {
      "start": "5:20",
      "end": "5:20",
      "text": "colored properly okay so odd length"
    },
    {
      "start": "5:20",
      "end": "5:22",
      "text": "colored properly okay so odd length cycles would imply that the graph cannot"
    },
    {
      "start": "5:22",
      "end": "5:22",
      "text": "cycles would imply that the graph cannot"
    },
    {
      "start": "5:22",
      "end": "5:24",
      "text": "cycles would imply that the graph cannot be colored using two colors and hence"
    },
    {
      "start": "5:24",
      "end": "5:24",
      "text": "be colored using two colors and hence"
    },
    {
      "start": "5:24",
      "end": "5:28",
      "text": "be colored using two colors and hence the graph cannot be bipartite so we know"
    },
    {
      "start": "5:28",
      "end": "5:28",
      "text": "the graph cannot be bipartite so we know"
    },
    {
      "start": "5:28",
      "end": "5:36",
      "text": "the graph cannot be bipartite so we know that odd length cycle implies not"
    },
    {
      "start": "5:36",
      "end": "5:36",
      "text": "that odd length cycle implies not"
    },
    {
      "start": "5:36",
      "end": "5:41",
      "text": "that odd length cycle implies not bipartite"
    },
    {
      "start": "5:42",
      "end": "5:43",
      "text": "so the contrapositive of this statement"
    },
    {
      "start": "5:43",
      "end": "5:50",
      "text": "so the contrapositive of this statement would mean bipartite implies no odd"
    },
    {
      "start": "5:50",
      "end": "5:50",
      "text": "would mean bipartite implies no odd"
    },
    {
      "start": "5:50",
      "end": "5:57",
      "text": "would mean bipartite implies no odd cycles okay now we need to show the"
    },
    {
      "start": "5:57",
      "end": "5:57",
      "text": "cycles okay now we need to show the"
    },
    {
      "start": "5:57",
      "end": "5:59",
      "text": "cycles okay now we need to show the other direction that is let's take a"
    },
    {
      "start": "5:59",
      "end": "5:59",
      "text": "other direction that is let's take a"
    },
    {
      "start": "5:59",
      "end": "6:02",
      "text": "other direction that is let's take a graph which doesn't contain any odd"
    },
    {
      "start": "6:02",
      "end": "6:02",
      "text": "graph which doesn't contain any odd"
    },
    {
      "start": "6:02",
      "end": "6:05",
      "text": "graph which doesn't contain any odd cycle that will be bipartite okay so"
    },
    {
      "start": "6:05",
      "end": "6:05",
      "text": "cycle that will be bipartite okay so"
    },
    {
      "start": "6:05",
      "end": "6:08",
      "text": "cycle that will be bipartite okay so let's look at any graph and we are going"
    },
    {
      "start": "6:08",
      "end": "6:08",
      "text": "let's look at any graph and we are going"
    },
    {
      "start": "6:08",
      "end": "6:10",
      "text": "let's look at any graph and we are going to color the edges in a particular order"
    },
    {
      "start": "6:10",
      "end": "6:10",
      "text": "to color the edges in a particular order"
    },
    {
      "start": "6:10",
      "end": "6:13",
      "text": "to color the edges in a particular order okay so we take any particular vertex"
    },
    {
      "start": "6:13",
      "end": "6:13",
      "text": "okay so we take any particular vertex"
    },
    {
      "start": "6:13",
      "end": "6:16",
      "text": "okay so we take any particular vertex let us call this as v1 so we are now"
    },
    {
      "start": "6:16",
      "end": "6:16",
      "text": "let us call this as v1 so we are now"
    },
    {
      "start": "6:16",
      "end": "6:22",
      "text": "let us call this as v1 so we are now looking at a graph without any odd"
    },
    {
      "start": "6:22",
      "end": "6:22",
      "text": "looking at a graph without any odd"
    },
    {
      "start": "6:22",
      "end": "6:24",
      "text": "looking at a graph without any odd cycles and we will show that it is"
    },
    {
      "start": "6:24",
      "end": "6:24",
      "text": "cycles and we will show that it is"
    },
    {
      "start": "6:24",
      "end": "6:26",
      "text": "cycles and we will show that it is bipartite okay so let us take any"
    },
    {
      "start": "6:26",
      "end": "6:26",
      "text": "bipartite okay so let us take any"
    },
    {
      "start": "6:26",
      "end": "6:30",
      "text": "bipartite okay so let us take any particular vertex of such a graph so let"
    },
    {
      "start": "6:30",
      "end": "6:30",
      "text": "particular vertex of such a graph so let"
    },
    {
      "start": "6:30",
      "end": "6:40",
      "text": "particular vertex of such a graph so let G be a graph without odd cycles and"
    },
    {
      "start": "6:40",
      "end": "6:40",
      "text": "G be a graph without odd cycles and"
    },
    {
      "start": "6:40",
      "end": "6:44",
      "text": "G be a graph without odd cycles and let's choose a particular vertex v1 okay"
    },
    {
      "start": "6:44",
      "end": "6:44",
      "text": "let's choose a particular vertex v1 okay"
    },
    {
      "start": "6:44",
      "end": "6:47",
      "text": "let's choose a particular vertex v1 okay we are going to construct an ordering"
    },
    {
      "start": "6:47",
      "end": "6:47",
      "text": "we are going to construct an ordering"
    },
    {
      "start": "6:47",
      "end": "6:51",
      "text": "we are going to construct an ordering and for this we will first look at all"
    },
    {
      "start": "6:51",
      "end": "6:51",
      "text": "and for this we will first look at all"
    },
    {
      "start": "6:51",
      "end": "6:53",
      "text": "and for this we will first look at all the vertices of vertices which are"
    },
    {
      "start": "6:53",
      "end": "6:53",
      "text": "the vertices of vertices which are"
    },
    {
      "start": "6:53",
      "end": "6:56",
      "text": "the vertices of vertices which are adjacent to v1 okay that is what we will"
    },
    {
      "start": "6:56",
      "end": "6:56",
      "text": "adjacent to v1 okay that is what we will"
    },
    {
      "start": "6:56",
      "end": "6:59",
      "text": "adjacent to v1 okay that is what we will call as level one okay"
    },
    {
      "start": "6:59",
      "end": "6:59",
      "text": "call as level one okay"
    },
    {
      "start": "6:59",
      "end": "7:01",
      "text": "call as level one okay so level one consists of all vertices"
    },
    {
      "start": "7:01",
      "end": "7:01",
      "text": "so level one consists of all vertices"
    },
    {
      "start": "7:01",
      "end": "7:07",
      "text": "so level one consists of all vertices which are neighbors of V one and then we"
    },
    {
      "start": "7:07",
      "end": "7:07",
      "text": "which are neighbors of V one and then we"
    },
    {
      "start": "7:07",
      "end": "7:09",
      "text": "which are neighbors of V one and then we will look at the neighbors of vertices"
    },
    {
      "start": "7:09",
      "end": "7:09",
      "text": "will look at the neighbors of vertices"
    },
    {
      "start": "7:09",
      "end": "7:14",
      "text": "will look at the neighbors of vertices in level one okay that will be at level"
    },
    {
      "start": "7:14",
      "end": "7:14",
      "text": "in level one okay that will be at level"
    },
    {
      "start": "7:14",
      "end": "7:19",
      "text": "in level one okay that will be at level two okay look at all their neighbors"
    },
    {
      "start": "7:19",
      "end": "7:19",
      "text": "two okay look at all their neighbors"
    },
    {
      "start": "7:19",
      "end": "7:23",
      "text": "two okay look at all their neighbors except of course the neighbor V one we"
    },
    {
      "start": "7:23",
      "end": "7:23",
      "text": "except of course the neighbor V one we"
    },
    {
      "start": "7:23",
      "end": "7:25",
      "text": "except of course the neighbor V one we look at all the other neighbors and that"
    },
    {
      "start": "7:25",
      "end": "7:25",
      "text": "look at all the other neighbors and that"
    },
    {
      "start": "7:25",
      "end": "7:29",
      "text": "look at all the other neighbors and that we will be putting in the next level and"
    },
    {
      "start": "7:29",
      "end": "7:29",
      "text": "we will be putting in the next level and"
    },
    {
      "start": "7:29",
      "end": "7:31",
      "text": "we will be putting in the next level and we continue this so we will get"
    },
    {
      "start": "7:31",
      "end": "7:31",
      "text": "we continue this so we will get"
    },
    {
      "start": "7:31",
      "end": "7:33",
      "text": "we continue this so we will get something like a levelled arrangement of"
    },
    {
      "start": "7:33",
      "end": "7:34",
      "text": "something like a levelled arrangement of"
    },
    {
      "start": "7:34",
      "end": "7:36",
      "text": "something like a levelled arrangement of the vertices this is the level 0 that is"
    },
    {
      "start": "7:36",
      "end": "7:36",
      "text": "the vertices this is the level 0 that is"
    },
    {
      "start": "7:36",
      "end": "7:39",
      "text": "the vertices this is the level 0 that is vertex V 1 and then there are level 1"
    },
    {
      "start": "7:39",
      "end": "7:39",
      "text": "vertex V 1 and then there are level 1"
    },
    {
      "start": "7:39",
      "end": "7:42",
      "text": "vertex V 1 and then there are level 1 vertices its neighbors will give you the"
    },
    {
      "start": "7:42",
      "end": "7:42",
      "text": "vertices its neighbors will give you the"
    },
    {
      "start": "7:42",
      "end": "7:43",
      "text": "vertices its neighbors will give you the level 2 and so on"
    },
    {
      "start": "7:43",
      "end": "7:43",
      "text": "level 2 and so on"
    },
    {
      "start": "7:43",
      "end": "7:48",
      "text": "level 2 and so on so this will have some number of levels"
    },
    {
      "start": "7:48",
      "end": "7:48",
      "text": "so this will have some number of levels"
    },
    {
      "start": "7:48",
      "end": "7:51",
      "text": "so this will have some number of levels note that if you look at the original"
    },
    {
      "start": "7:51",
      "end": "7:51",
      "text": "note that if you look at the original"
    },
    {
      "start": "7:51",
      "end": "7:54",
      "text": "note that if you look at the original graph and look at all its edges they"
    },
    {
      "start": "7:54",
      "end": "7:54",
      "text": "graph and look at all its edges they"
    },
    {
      "start": "7:54",
      "end": "7:55",
      "text": "graph and look at all its edges they will pass for"
    },
    {
      "start": "7:55",
      "end": "7:55",
      "text": "will pass for"
    },
    {
      "start": "7:55",
      "end": "7:58",
      "text": "will pass for level I to level I plus one or level I"
    },
    {
      "start": "7:58",
      "end": "7:58",
      "text": "level I to level I plus one or level I"
    },
    {
      "start": "7:58",
      "end": "8:03",
      "text": "level I to level I plus one or level I to level I minus one they cannot jump to"
    },
    {
      "start": "8:03",
      "end": "8:03",
      "text": "to level I minus one they cannot jump to"
    },
    {
      "start": "8:03",
      "end": "8:06",
      "text": "to level I minus one they cannot jump to levels because if if there was some"
    },
    {
      "start": "8:06",
      "end": "8:06",
      "text": "levels because if if there was some"
    },
    {
      "start": "8:06",
      "end": "8:08",
      "text": "levels because if if there was some vertex here and there was an let's say"
    },
    {
      "start": "8:08",
      "end": "8:08",
      "text": "vertex here and there was an let's say"
    },
    {
      "start": "8:08",
      "end": "8:10",
      "text": "vertex here and there was an let's say there was some vertex at level one and"
    },
    {
      "start": "8:10",
      "end": "8:10",
      "text": "there was some vertex at level one and"
    },
    {
      "start": "8:10",
      "end": "8:12",
      "text": "there was some vertex at level one and it is connected to level three then"
    },
    {
      "start": "8:12",
      "end": "8:12",
      "text": "it is connected to level three then"
    },
    {
      "start": "8:12",
      "end": "8:14",
      "text": "it is connected to level three then automatically it would have been in"
    },
    {
      "start": "8:14",
      "end": "8:14",
      "text": "automatically it would have been in"
    },
    {
      "start": "8:14",
      "end": "8:19",
      "text": "automatically it would have been in level two as well because it's a"
    },
    {
      "start": "8:19",
      "end": "8:19",
      "text": "level two as well because it's a"
    },
    {
      "start": "8:19",
      "end": "8:21",
      "text": "level two as well because it's a neighbor so it would have to be in level"
    },
    {
      "start": "8:21",
      "end": "8:21",
      "text": "neighbor so it would have to be in level"
    },
    {
      "start": "8:21",
      "end": "8:23",
      "text": "neighbor so it would have to be in level two so there is no possibility of"
    },
    {
      "start": "8:23",
      "end": "8:23",
      "text": "two so there is no possibility of"
    },
    {
      "start": "8:23",
      "end": "8:27",
      "text": "two so there is no possibility of jumping the levels okay so all the"
    },
    {
      "start": "8:27",
      "end": "8:27",
      "text": "jumping the levels okay so all the"
    },
    {
      "start": "8:27",
      "end": "8:29",
      "text": "jumping the levels okay so all the neighbors were essentially accounted for"
    },
    {
      "start": "8:29",
      "end": "8:29",
      "text": "neighbors were essentially accounted for"
    },
    {
      "start": "8:29",
      "end": "8:32",
      "text": "neighbors were essentially accounted for here of course the previous neighbors"
    },
    {
      "start": "8:32",
      "end": "8:32",
      "text": "here of course the previous neighbors"
    },
    {
      "start": "8:32",
      "end": "8:35",
      "text": "here of course the previous neighbors whatever I mean for example if you take"
    },
    {
      "start": "8:35",
      "end": "8:35",
      "text": "whatever I mean for example if you take"
    },
    {
      "start": "8:35",
      "end": "8:37",
      "text": "whatever I mean for example if you take a node here some of its neighbors are"
    },
    {
      "start": "8:37",
      "end": "8:37",
      "text": "a node here some of its neighbors are"
    },
    {
      "start": "8:37",
      "end": "8:38",
      "text": "a node here some of its neighbors are going to be here and then some of the"
    },
    {
      "start": "8:38",
      "end": "8:38",
      "text": "going to be here and then some of the"
    },
    {
      "start": "8:38",
      "end": "8:41",
      "text": "going to be here and then some of the neighbors are going to be in the layer"
    },
    {
      "start": "8:41",
      "end": "8:41",
      "text": "neighbors are going to be in the layer"
    },
    {
      "start": "8:41",
      "end": "8:45",
      "text": "neighbors are going to be in the layer above it what we have argued us nothing"
    },
    {
      "start": "8:45",
      "end": "8:45",
      "text": "above it what we have argued us nothing"
    },
    {
      "start": "8:45",
      "end": "8:48",
      "text": "above it what we have argued us nothing can go from one layer to this this is"
    },
    {
      "start": "8:48",
      "end": "8:48",
      "text": "can go from one layer to this this is"
    },
    {
      "start": "8:48",
      "end": "8:57",
      "text": "can go from one layer to this this is forbidden okay now can there be edge"
    },
    {
      "start": "8:57",
      "end": "8:57",
      "text": "forbidden okay now can there be edge"
    },
    {
      "start": "8:57",
      "end": "8:59",
      "text": "forbidden okay now can there be edge between two vertices in the same level"
    },
    {
      "start": "8:59",
      "end": "8:59",
      "text": "between two vertices in the same level"
    },
    {
      "start": "8:59",
      "end": "9:05",
      "text": "between two vertices in the same level is this possible we will argue that this"
    },
    {
      "start": "9:05",
      "end": "9:05",
      "text": "is this possible we will argue that this"
    },
    {
      "start": "9:05",
      "end": "9:07",
      "text": "is this possible we will argue that this is also not possible because suppose"
    },
    {
      "start": "9:07",
      "end": "9:07",
      "text": "is also not possible because suppose"
    },
    {
      "start": "9:07",
      "end": "9:11",
      "text": "is also not possible because suppose there was one such edge it is within a"
    },
    {
      "start": "9:11",
      "end": "9:11",
      "text": "there was one such edge it is within a"
    },
    {
      "start": "9:11",
      "end": "9:15",
      "text": "there was one such edge it is within a level then these would have some"
    },
    {
      "start": "9:15",
      "end": "9:15",
      "text": "level then these would have some"
    },
    {
      "start": "9:15",
      "end": "9:18",
      "text": "level then these would have some ancestor some common ancestor of course"
    },
    {
      "start": "9:18",
      "end": "9:18",
      "text": "ancestor some common ancestor of course"
    },
    {
      "start": "9:18",
      "end": "9:20",
      "text": "ancestor some common ancestor of course v1 is their common ancestor but there"
    },
    {
      "start": "9:20",
      "end": "9:20",
      "text": "v1 is their common ancestor but there"
    },
    {
      "start": "9:20",
      "end": "9:22",
      "text": "v1 is their common ancestor but there could be some common ancestor at a layer"
    },
    {
      "start": "9:22",
      "end": "9:22",
      "text": "could be some common ancestor at a layer"
    },
    {
      "start": "9:22",
      "end": "9:26",
      "text": "could be some common ancestor at a layer closer to this particular level if you"
    },
    {
      "start": "9:26",
      "end": "9:26",
      "text": "closer to this particular level if you"
    },
    {
      "start": "9:26",
      "end": "9:29",
      "text": "closer to this particular level if you call this as level I there is some other"
    },
    {
      "start": "9:29",
      "end": "9:29",
      "text": "call this as level I there is some other"
    },
    {
      "start": "9:29",
      "end": "9:32",
      "text": "call this as level I there is some other level which is closer to I then let's"
    },
    {
      "start": "9:32",
      "end": "9:32",
      "text": "level which is closer to I then let's"
    },
    {
      "start": "9:32",
      "end": "9:35",
      "text": "level which is closer to I then let's say v1 and there is a node there such"
    },
    {
      "start": "9:35",
      "end": "9:35",
      "text": "say v1 and there is a node there such"
    },
    {
      "start": "9:35",
      "end": "9:38",
      "text": "say v1 and there is a node there such that that's a common ancestor of both U"
    },
    {
      "start": "9:38",
      "end": "9:38",
      "text": "that that's a common ancestor of both U"
    },
    {
      "start": "9:38",
      "end": "9:41",
      "text": "that that's a common ancestor of both U and we okay now if you look at the"
    },
    {
      "start": "9:41",
      "end": "9:41",
      "text": "and we okay now if you look at the"
    },
    {
      "start": "9:41",
      "end": "9:44",
      "text": "and we okay now if you look at the common ancestor and the path to you"
    },
    {
      "start": "9:44",
      "end": "9:44",
      "text": "common ancestor and the path to you"
    },
    {
      "start": "9:44",
      "end": "9:46",
      "text": "common ancestor and the path to you those apart from that common ancestor to"
    },
    {
      "start": "9:46",
      "end": "9:46",
      "text": "those apart from that common ancestor to"
    },
    {
      "start": "9:46",
      "end": "9:49",
      "text": "those apart from that common ancestor to V and apart from the common ancestor to"
    },
    {
      "start": "9:49",
      "end": "9:49",
      "text": "V and apart from the common ancestor to"
    },
    {
      "start": "9:49",
      "end": "9:52",
      "text": "V and apart from the common ancestor to you and both these paths will have"
    },
    {
      "start": "9:52",
      "end": "9:52",
      "text": "you and both these paths will have"
    },
    {
      "start": "9:52",
      "end": "9:56",
      "text": "you and both these paths will have length exactly the height difference"
    },
    {
      "start": "9:56",
      "end": "9:56",
      "text": "length exactly the height difference"
    },
    {
      "start": "9:56",
      "end": "9:58",
      "text": "length exactly the height difference between these two layers and they will"
    },
    {
      "start": "9:58",
      "end": "9:58",
      "text": "between these two layers and they will"
    },
    {
      "start": "9:58",
      "end": "10:02",
      "text": "between these two layers and they will be equal and therefore if you look at so"
    },
    {
      "start": "10:02",
      "end": "10:02",
      "text": "be equal and therefore if you look at so"
    },
    {
      "start": "10:02",
      "end": "10:04",
      "text": "be equal and therefore if you look at so if this was a common ancestor there's a"
    },
    {
      "start": "10:04",
      "end": "10:04",
      "text": "if this was a common ancestor there's a"
    },
    {
      "start": "10:04",
      "end": "10:07",
      "text": "if this was a common ancestor there's a path common ancestor and then there's a"
    },
    {
      "start": "10:07",
      "end": "10:07",
      "text": "path common ancestor and then there's a"
    },
    {
      "start": "10:07",
      "end": "10:09",
      "text": "path common ancestor and then there's a path to you there's a path to be"
    },
    {
      "start": "10:09",
      "end": "10:09",
      "text": "path to you there's a path to be"
    },
    {
      "start": "10:09",
      "end": "10:11",
      "text": "path to you there's a path to be and there's an edge between them"
    },
    {
      "start": "10:11",
      "end": "10:11",
      "text": "and there's an edge between them"
    },
    {
      "start": "10:11",
      "end": "10:14",
      "text": "and there's an edge between them together this forms an odd cycle because"
    },
    {
      "start": "10:14",
      "end": "10:14",
      "text": "together this forms an odd cycle because"
    },
    {
      "start": "10:14",
      "end": "10:17",
      "text": "together this forms an odd cycle because this path length is X this path length"
    },
    {
      "start": "10:17",
      "end": "10:17",
      "text": "this path length is X this path length"
    },
    {
      "start": "10:17",
      "end": "10:19",
      "text": "this path length is X this path length is X and this is of length 1 and"
    },
    {
      "start": "10:19",
      "end": "10:19",
      "text": "is X and this is of length 1 and"
    },
    {
      "start": "10:19",
      "end": "10:21",
      "text": "is X and this is of length 1 and therefore 2x plus 1 being an odd number"
    },
    {
      "start": "10:21",
      "end": "10:21",
      "text": "therefore 2x plus 1 being an odd number"
    },
    {
      "start": "10:21",
      "end": "10:23",
      "text": "therefore 2x plus 1 being an odd number you have a cycle of odd lengths but we"
    },
    {
      "start": "10:23",
      "end": "10:23",
      "text": "you have a cycle of odd lengths but we"
    },
    {
      "start": "10:23",
      "end": "10:26",
      "text": "you have a cycle of odd lengths but we assume that G is a graph without odd"
    },
    {
      "start": "10:26",
      "end": "10:26",
      "text": "assume that G is a graph without odd"
    },
    {
      "start": "10:26",
      "end": "10:30",
      "text": "assume that G is a graph without odd cycles we wrote it differently but yeah"
    },
    {
      "start": "10:30",
      "end": "10:30",
      "text": "cycles we wrote it differently but yeah"
    },
    {
      "start": "10:30",
      "end": "10:32",
      "text": "cycles we wrote it differently but yeah so this is G is a graph without odd"
    },
    {
      "start": "10:32",
      "end": "10:32",
      "text": "so this is G is a graph without odd"
    },
    {
      "start": "10:32",
      "end": "10:34",
      "text": "so this is G is a graph without odd cycles so if you take a graph without"
    },
    {
      "start": "10:34",
      "end": "10:34",
      "text": "cycles so if you take a graph without"
    },
    {
      "start": "10:34",
      "end": "10:38",
      "text": "cycles so if you take a graph without odd cycles then this is not possible ok"
    },
    {
      "start": "10:38",
      "end": "10:38",
      "text": "odd cycles then this is not possible ok"
    },
    {
      "start": "10:38",
      "end": "10:41",
      "text": "odd cycles then this is not possible ok so all the edges will be between"
    },
    {
      "start": "10:41",
      "end": "10:41",
      "text": "so all the edges will be between"
    },
    {
      "start": "10:41",
      "end": "10:45",
      "text": "so all the edges will be between adjacent layers and within a layer there"
    },
    {
      "start": "10:45",
      "end": "10:45",
      "text": "adjacent layers and within a layer there"
    },
    {
      "start": "10:45",
      "end": "10:50",
      "text": "adjacent layers and within a layer there are no edges now any graph without odd"
    },
    {
      "start": "10:50",
      "end": "10:50",
      "text": "are no edges now any graph without odd"
    },
    {
      "start": "10:50",
      "end": "10:53",
      "text": "are no edges now any graph without odd cycle we can construct this leveled"
    },
    {
      "start": "10:53",
      "end": "10:53",
      "text": "cycle we can construct this leveled"
    },
    {
      "start": "10:53",
      "end": "10:55",
      "text": "cycle we can construct this leveled arrangement and now if you look at the"
    },
    {
      "start": "10:55",
      "end": "10:55",
      "text": "arrangement and now if you look at the"
    },
    {
      "start": "10:55",
      "end": "10:58",
      "text": "arrangement and now if you look at the odd layers and give it one color and the"
    },
    {
      "start": "10:58",
      "end": "10:58",
      "text": "odd layers and give it one color and the"
    },
    {
      "start": "10:58",
      "end": "11:02",
      "text": "odd layers and give it one color and the even layers and give it another color we"
    },
    {
      "start": "11:02",
      "end": "11:02",
      "text": "even layers and give it another color we"
    },
    {
      "start": "11:02",
      "end": "11:04",
      "text": "even layers and give it another color we can essentially get a valid coloring"
    },
    {
      "start": "11:04",
      "end": "11:04",
      "text": "can essentially get a valid coloring"
    },
    {
      "start": "11:04",
      "end": "11:07",
      "text": "can essentially get a valid coloring using just two color ok because between"
    },
    {
      "start": "11:07",
      "end": "11:07",
      "text": "using just two color ok because between"
    },
    {
      "start": "11:07",
      "end": "11:10",
      "text": "using just two color ok because between two odd layers the distance is at least"
    },
    {
      "start": "11:10",
      "end": "11:10",
      "text": "two odd layers the distance is at least"
    },
    {
      "start": "11:10",
      "end": "11:12",
      "text": "two odd layers the distance is at least two and therefore there is no edge"
    },
    {
      "start": "11:12",
      "end": "11:12",
      "text": "two and therefore there is no edge"
    },
    {
      "start": "11:12",
      "end": "11:14",
      "text": "two and therefore there is no edge between them same applies for between"
    },
    {
      "start": "11:14",
      "end": "11:14",
      "text": "between them same applies for between"
    },
    {
      "start": "11:14",
      "end": "11:17",
      "text": "between them same applies for between the even layers ok so that completes"
    },
    {
      "start": "11:17",
      "end": "11:17",
      "text": "the even layers ok so that completes"
    },
    {
      "start": "11:17",
      "end": "11:20",
      "text": "the even layers ok so that completes proof that I mean if you take a graph"
    },
    {
      "start": "11:20",
      "end": "11:20",
      "text": "proof that I mean if you take a graph"
    },
    {
      "start": "11:20",
      "end": "11:22",
      "text": "proof that I mean if you take a graph without odd cycles they can be colored"
    },
    {
      "start": "11:22",
      "end": "11:22",
      "text": "without odd cycles they can be colored"
    },
    {
      "start": "11:22",
      "end": "11:25",
      "text": "without odd cycles they can be colored with two colors it is a two colorable"
    },
    {
      "start": "11:25",
      "end": "11:25",
      "text": "with two colors it is a two colorable"
    },
    {
      "start": "11:25",
      "end": "11:30",
      "text": "with two colors it is a two colorable graph or a bipartite graph now we will"
    },
    {
      "start": "11:30",
      "end": "11:30",
      "text": "graph or a bipartite graph now we will"
    },
    {
      "start": "11:30",
      "end": "11:32",
      "text": "graph or a bipartite graph now we will see another concept called as minimal"
    },
    {
      "start": "11:32",
      "end": "11:32",
      "text": "see another concept called as minimal"
    },
    {
      "start": "11:32",
      "end": "11:38",
      "text": "see another concept called as minimal spanning trees"
    },
    {
      "start": "11:42",
      "end": "11:42",
      "text": "we learned about trees and trees we're"
    },
    {
      "start": "11:42",
      "end": "11:47",
      "text": "we learned about trees and trees we're graphs such that there were no cycles in"
    },
    {
      "start": "11:47",
      "end": "11:47",
      "text": "graphs such that there were no cycles in"
    },
    {
      "start": "11:47",
      "end": "11:51",
      "text": "graphs such that there were no cycles in it and that they were connected now here"
    },
    {
      "start": "11:51",
      "end": "11:51",
      "text": "it and that they were connected now here"
    },
    {
      "start": "11:51",
      "end": "11:53",
      "text": "it and that they were connected now here when we are talking about minimal"
    },
    {
      "start": "11:53",
      "end": "11:53",
      "text": "when we are talking about minimal"
    },
    {
      "start": "11:53",
      "end": "11:55",
      "text": "when we are talking about minimal spanning tree we have a specialized kind"
    },
    {
      "start": "11:55",
      "end": "11:55",
      "text": "spanning tree we have a specialized kind"
    },
    {
      "start": "11:55",
      "end": "11:59",
      "text": "spanning tree we have a specialized kind of graph in under consideration so what"
    },
    {
      "start": "11:59",
      "end": "11:59",
      "text": "of graph in under consideration so what"
    },
    {
      "start": "11:59",
      "end": "12:00",
      "text": "of graph in under consideration so what we will look at is what are called as"
    },
    {
      "start": "12:00",
      "end": "12:00",
      "text": "we will look at is what are called as"
    },
    {
      "start": "12:00",
      "end": "12:09",
      "text": "we will look at is what are called as weighted graphs so weighted graph is"
    },
    {
      "start": "12:09",
      "end": "12:09",
      "text": "weighted graphs so weighted graph is"
    },
    {
      "start": "12:09",
      "end": "12:12",
      "text": "weighted graphs so weighted graph is nothing but a graph with the edges"
    },
    {
      "start": "12:12",
      "end": "12:12",
      "text": "nothing but a graph with the edges"
    },
    {
      "start": "12:12",
      "end": "12:15",
      "text": "nothing but a graph with the edges having a certain weight so a weighted"
    },
    {
      "start": "12:15",
      "end": "12:15",
      "text": "having a certain weight so a weighted"
    },
    {
      "start": "12:15",
      "end": "12:23",
      "text": "having a certain weight so a weighted graph is a graph with weights on the"
    },
    {
      "start": "12:23",
      "end": "12:23",
      "text": "graph is a graph with weights on the"
    },
    {
      "start": "12:23",
      "end": "12:27",
      "text": "graph is a graph with weights on the edges that means we have a function"
    },
    {
      "start": "12:27",
      "end": "12:27",
      "text": "edges that means we have a function"
    },
    {
      "start": "12:27",
      "end": "12:31",
      "text": "edges that means we have a function that's WT which goes from the edge set"
    },
    {
      "start": "12:31",
      "end": "12:31",
      "text": "that's WT which goes from the edge set"
    },
    {
      "start": "12:31",
      "end": "12:38",
      "text": "that's WT which goes from the edge set to natural numbers okay so W T e would"
    },
    {
      "start": "12:38",
      "end": "12:38",
      "text": "to natural numbers okay so W T e would"
    },
    {
      "start": "12:38",
      "end": "12:43",
      "text": "to natural numbers okay so W T e would be the this will be called as the weight"
    },
    {
      "start": "12:43",
      "end": "12:43",
      "text": "be the this will be called as the weight"
    },
    {
      "start": "12:43",
      "end": "12:54",
      "text": "be the this will be called as the weight of the edge for example"
    },
    {
      "start": "12:58",
      "end": "12:58",
      "text": "here's a weighted graph with six"
    },
    {
      "start": "12:58",
      "end": "13:01",
      "text": "here's a weighted graph with six vertices and the weights being as"
    },
    {
      "start": "13:01",
      "end": "13:01",
      "text": "vertices and the weights being as"
    },
    {
      "start": "13:01",
      "end": "13:10",
      "text": "vertices and the weights being as indicated by the numbers above the edges"
    },
    {
      "start": "13:15",
      "end": "13:15",
      "text": "so here if you look at the edge a B and"
    },
    {
      "start": "13:15",
      "end": "13:17",
      "text": "so here if you look at the edge a B and the edge BC there they are having the"
    },
    {
      "start": "13:17",
      "end": "13:17",
      "text": "the edge BC there they are having the"
    },
    {
      "start": "13:17",
      "end": "13:22",
      "text": "the edge BC there they are having the same weight so what we will assume in"
    },
    {
      "start": "13:22",
      "end": "13:22",
      "text": "same weight so what we will assume in"
    },
    {
      "start": "13:22",
      "end": "13:24",
      "text": "same weight so what we will assume in our study of minimal spanning trees is"
    },
    {
      "start": "13:24",
      "end": "13:24",
      "text": "our study of minimal spanning trees is"
    },
    {
      "start": "13:24",
      "end": "13:32",
      "text": "our study of minimal spanning trees is that the edge weights are distinct say"
    },
    {
      "start": "13:32",
      "end": "13:32",
      "text": "that the edge weights are distinct say"
    },
    {
      "start": "13:32",
      "end": "13:37",
      "text": "that the edge weights are distinct say if e1 is not equal to e2 then weight of"
    },
    {
      "start": "13:37",
      "end": "13:37",
      "text": "if e1 is not equal to e2 then weight of"
    },
    {
      "start": "13:37",
      "end": "13:45",
      "text": "if e1 is not equal to e2 then weight of e1 is not equal to weight of e 2 so so"
    },
    {
      "start": "13:45",
      "end": "13:45",
      "text": "e1 is not equal to weight of e 2 so so"
    },
    {
      "start": "13:45",
      "end": "13:47",
      "text": "e1 is not equal to weight of e 2 so so we can think about our weighted graphs"
    },
    {
      "start": "13:47",
      "end": "13:47",
      "text": "we can think about our weighted graphs"
    },
    {
      "start": "13:47",
      "end": "13:51",
      "text": "we can think about our weighted graphs as graphs having unique edge weights"
    },
    {
      "start": "13:51",
      "end": "13:51",
      "text": "as graphs having unique edge weights"
    },
    {
      "start": "13:51",
      "end": "13:54",
      "text": "as graphs having unique edge weights each edge weight is a distinct number"
    },
    {
      "start": "13:54",
      "end": "13:54",
      "text": "each edge weight is a distinct number"
    },
    {
      "start": "13:54",
      "end": "13:55",
      "text": "each edge weight is a distinct number and we will assume that it is a natural"
    },
    {
      "start": "13:55",
      "end": "13:55",
      "text": "and we will assume that it is a natural"
    },
    {
      "start": "13:55",
      "end": "14:00",
      "text": "and we will assume that it is a natural number now let's define what our minimal"
    },
    {
      "start": "14:00",
      "end": "14:00",
      "text": "number now let's define what our minimal"
    },
    {
      "start": "14:00",
      "end": "14:13",
      "text": "number now let's define what our minimal spanning trees a spanning tree is a tree"
    },
    {
      "start": "14:13",
      "end": "14:13",
      "text": "spanning trees a spanning tree is a tree"
    },
    {
      "start": "14:13",
      "end": "14:17",
      "text": "spanning trees a spanning tree is a tree so T suspending - you're off a graph G"
    },
    {
      "start": "14:17",
      "end": "14:17",
      "text": "so T suspending - you're off a graph G"
    },
    {
      "start": "14:17",
      "end": "14:24",
      "text": "so T suspending - you're off a graph G is a treaty which is a sub graph of G so"
    },
    {
      "start": "14:24",
      "end": "14:24",
      "text": "is a treaty which is a sub graph of G so"
    },
    {
      "start": "14:24",
      "end": "14:26",
      "text": "is a treaty which is a sub graph of G so there are no isolated vertices there are"
    },
    {
      "start": "14:26",
      "end": "14:26",
      "text": "there are no isolated vertices there are"
    },
    {
      "start": "14:26",
      "end": "14:28",
      "text": "there are no isolated vertices there are no isolated components so if you take a"
    },
    {
      "start": "14:28",
      "end": "14:28",
      "text": "no isolated components so if you take a"
    },
    {
      "start": "14:28",
      "end": "14:31",
      "text": "no isolated components so if you take a sub graph of G this means this subset of"
    },
    {
      "start": "14:31",
      "end": "14:31",
      "text": "sub graph of G this means this subset of"
    },
    {
      "start": "14:31",
      "end": "14:34",
      "text": "sub graph of G this means this subset of the edges such that they form a"
    },
    {
      "start": "14:34",
      "end": "14:34",
      "text": "the edges such that they form a"
    },
    {
      "start": "14:34",
      "end": "14:38",
      "text": "the edges such that they form a connected graph and it doesn't have any"
    },
    {
      "start": "14:38",
      "end": "14:38",
      "text": "connected graph and it doesn't have any"
    },
    {
      "start": "14:38",
      "end": "14:40",
      "text": "connected graph and it doesn't have any cycle in other words you wanted tree"
    },
    {
      "start": "14:40",
      "end": "14:40",
      "text": "cycle in other words you wanted tree"
    },
    {
      "start": "14:40",
      "end": "14:43",
      "text": "cycle in other words you wanted tree such that every vertex is part of this"
    },
    {
      "start": "14:43",
      "end": "14:43",
      "text": "such that every vertex is part of this"
    },
    {
      "start": "14:43",
      "end": "14:46",
      "text": "such that every vertex is part of this tree for example if I take the red"
    },
    {
      "start": "14:46",
      "end": "14:46",
      "text": "tree for example if I take the red"
    },
    {
      "start": "14:46",
      "end": "14:51",
      "text": "tree for example if I take the red colored edges that forms a spanning tree"
    },
    {
      "start": "14:51",
      "end": "14:51",
      "text": "colored edges that forms a spanning tree"
    },
    {
      "start": "14:51",
      "end": "14:54",
      "text": "colored edges that forms a spanning tree you can see that there are many spanning"
    },
    {
      "start": "14:54",
      "end": "14:54",
      "text": "you can see that there are many spanning"
    },
    {
      "start": "14:54",
      "end": "14:58",
      "text": "you can see that there are many spanning trees for this particular graphs now the"
    },
    {
      "start": "14:58",
      "end": "14:58",
      "text": "trees for this particular graphs now the"
    },
    {
      "start": "14:58",
      "end": "15:01",
      "text": "trees for this particular graphs now the weight of a spanning tree is defined as"
    },
    {
      "start": "15:01",
      "end": "15:01",
      "text": "weight of a spanning tree is defined as"
    },
    {
      "start": "15:01",
      "end": "15:06",
      "text": "weight of a spanning tree is defined as the sum of the weights of the edges"
    },
    {
      "start": "15:11",
      "end": "15:11",
      "text": "so weight of a spanning tree is the sum"
    },
    {
      "start": "15:11",
      "end": "15:19",
      "text": "so weight of a spanning tree is the sum over the edges in tea weight of edge for"
    },
    {
      "start": "15:19",
      "end": "15:19",
      "text": "over the edges in tea weight of edge for"
    },
    {
      "start": "15:19",
      "end": "15:21",
      "text": "over the edges in tea weight of edge for example the red tree that has been"
    },
    {
      "start": "15:21",
      "end": "15:21",
      "text": "example the red tree that has been"
    },
    {
      "start": "15:21",
      "end": "15:24",
      "text": "example the red tree that has been described its weight this so if you call"
    },
    {
      "start": "15:24",
      "end": "15:24",
      "text": "described its weight this so if you call"
    },
    {
      "start": "15:24",
      "end": "15:28",
      "text": "described its weight this so if you call the red tree by tea weight of T is equal"
    },
    {
      "start": "15:28",
      "end": "15:28",
      "text": "the red tree by tea weight of T is equal"
    },
    {
      "start": "15:28",
      "end": "15:31",
      "text": "the red tree by tea weight of T is equal to one plus three plus two plus five"
    },
    {
      "start": "15:31",
      "end": "15:31",
      "text": "to one plus three plus two plus five"
    },
    {
      "start": "15:31",
      "end": "15:38",
      "text": "to one plus three plus two plus five plus six so that is 17 and minimal"
    },
    {
      "start": "15:38",
      "end": "15:38",
      "text": "plus six so that is 17 and minimal"
    },
    {
      "start": "15:38",
      "end": "15:42",
      "text": "plus six so that is 17 and minimal spanning tree is a tree which has the"
    },
    {
      "start": "15:42",
      "end": "15:42",
      "text": "spanning tree is a tree which has the"
    },
    {
      "start": "15:42",
      "end": "15:45",
      "text": "spanning tree is a tree which has the smallest weight amongst all the spanning"
    },
    {
      "start": "15:45",
      "end": "15:45",
      "text": "smallest weight amongst all the spanning"
    },
    {
      "start": "15:45",
      "end": "15:46",
      "text": "smallest weight amongst all the spanning trees so there could be multiple"
    },
    {
      "start": "15:46",
      "end": "15:46",
      "text": "trees so there could be multiple"
    },
    {
      "start": "15:46",
      "end": "15:50",
      "text": "trees so there could be multiple spanning trees and if we didn't assume"
    },
    {
      "start": "15:50",
      "end": "15:50",
      "text": "spanning trees and if we didn't assume"
    },
    {
      "start": "15:50",
      "end": "15:53",
      "text": "spanning trees and if we didn't assume that the edge weights are distinct"
    },
    {
      "start": "15:53",
      "end": "15:53",
      "text": "that the edge weights are distinct"
    },
    {
      "start": "15:53",
      "end": "15:57",
      "text": "that the edge weights are distinct there's a possibility that the there"
    },
    {
      "start": "15:57",
      "end": "15:57",
      "text": "there's a possibility that the there"
    },
    {
      "start": "15:57",
      "end": "15:59",
      "text": "there's a possibility that the there could be multiple trees with same weight"
    },
    {
      "start": "15:59",
      "end": "15:59",
      "text": "could be multiple trees with same weight"
    },
    {
      "start": "15:59",
      "end": "16:03",
      "text": "could be multiple trees with same weight and so all of them will be valid minimal"
    },
    {
      "start": "16:03",
      "end": "16:03",
      "text": "and so all of them will be valid minimal"
    },
    {
      "start": "16:03",
      "end": "16:05",
      "text": "and so all of them will be valid minimal spanning trees look at the smallest"
    },
    {
      "start": "16:05",
      "end": "16:05",
      "text": "spanning trees look at the smallest"
    },
    {
      "start": "16:05",
      "end": "16:08",
      "text": "spanning trees look at the smallest weighted tree spanning tree that's"
    },
    {
      "start": "16:08",
      "end": "16:08",
      "text": "weighted tree spanning tree that's"
    },
    {
      "start": "16:08",
      "end": "16:10",
      "text": "weighted tree spanning tree that's called as a minimal spanning tree for"
    },
    {
      "start": "16:10",
      "end": "16:10",
      "text": "called as a minimal spanning tree for"
    },
    {
      "start": "16:10",
      "end": "16:13",
      "text": "called as a minimal spanning tree for example in this graph if you take"
    },
    {
      "start": "16:13",
      "end": "16:13",
      "text": "example in this graph if you take"
    },
    {
      "start": "16:13",
      "end": "16:25",
      "text": "example in this graph if you take another collection of edges"
    },
    {
      "start": "16:29",
      "end": "16:29",
      "text": "so if you take these blue colored edges"
    },
    {
      "start": "16:29",
      "end": "16:32",
      "text": "so if you take these blue colored edges their weight is going to be if you call"
    },
    {
      "start": "16:32",
      "end": "16:32",
      "text": "their weight is going to be if you call"
    },
    {
      "start": "16:32",
      "end": "16:37",
      "text": "their weight is going to be if you call them as t1 weight of t1 is going to be 1"
    },
    {
      "start": "16:37",
      "end": "16:37",
      "text": "them as t1 weight of t1 is going to be 1"
    },
    {
      "start": "16:37",
      "end": "16:43",
      "text": "them as t1 weight of t1 is going to be 1 plus 2 plus 2 plus 4 plus 4 that's going"
    },
    {
      "start": "16:43",
      "end": "16:43",
      "text": "plus 2 plus 2 plus 4 plus 4 that's going"
    },
    {
      "start": "16:43",
      "end": "16:48",
      "text": "plus 2 plus 2 plus 4 plus 4 that's going to be 13 so that's less than T but it is"
    },
    {
      "start": "16:48",
      "end": "16:48",
      "text": "to be 13 so that's less than T but it is"
    },
    {
      "start": "16:48",
      "end": "16:51",
      "text": "to be 13 so that's less than T but it is not clear why this should be the minimal"
    },
    {
      "start": "16:51",
      "end": "16:51",
      "text": "not clear why this should be the minimal"
    },
    {
      "start": "16:51",
      "end": "16:53",
      "text": "not clear why this should be the minimal spanning tree of this particular graph"
    },
    {
      "start": "16:53",
      "end": "16:53",
      "text": "spanning tree of this particular graph"
    },
    {
      "start": "16:53",
      "end": "16:55",
      "text": "spanning tree of this particular graph now we will see certain properties which"
    },
    {
      "start": "16:55",
      "end": "16:55",
      "text": "now we will see certain properties which"
    },
    {
      "start": "16:55",
      "end": "16:58",
      "text": "now we will see certain properties which will help us compute the minimal"
    },
    {
      "start": "16:58",
      "end": "16:58",
      "text": "will help us compute the minimal"
    },
    {
      "start": "16:58",
      "end": "17:02",
      "text": "will help us compute the minimal spanning tree of any graph so there are"
    },
    {
      "start": "17:02",
      "end": "17:02",
      "text": "spanning tree of any graph so there are"
    },
    {
      "start": "17:02",
      "end": "17:04",
      "text": "spanning tree of any graph so there are two crucial properties which will help"
    },
    {
      "start": "17:04",
      "end": "17:04",
      "text": "two crucial properties which will help"
    },
    {
      "start": "17:04",
      "end": "17:06",
      "text": "two crucial properties which will help us identify the minimal spanning tree"
    },
    {
      "start": "17:06",
      "end": "17:06",
      "text": "us identify the minimal spanning tree"
    },
    {
      "start": "17:06",
      "end": "17:11",
      "text": "us identify the minimal spanning tree the first property is called as the cut"
    },
    {
      "start": "17:11",
      "end": "17:11",
      "text": "the first property is called as the cut"
    },
    {
      "start": "17:11",
      "end": "17:20",
      "text": "the first property is called as the cut property"
    },
    {
      "start": "17:23",
      "end": "17:23",
      "text": "so cut property essentially states that"
    },
    {
      "start": "17:23",
      "end": "17:40",
      "text": "so cut property essentially states that the least weighted cottage is part of"
    },
    {
      "start": "17:40",
      "end": "17:40",
      "text": "the least weighted cottage is part of"
    },
    {
      "start": "17:40",
      "end": "17:51",
      "text": "the least weighted cottage is part of every minimal spanning tree"
    },
    {
      "start": "17:53",
      "end": "17:53",
      "text": "so we need to understand what is a"
    },
    {
      "start": "17:53",
      "end": "18:00",
      "text": "so we need to understand what is a cottage so a cut is defined as a"
    },
    {
      "start": "18:00",
      "end": "18:00",
      "text": "cottage so a cut is defined as a"
    },
    {
      "start": "18:00",
      "end": "18:10",
      "text": "cottage so a cut is defined as a partition of the vertices"
    },
    {
      "start": "18:12",
      "end": "18:12",
      "text": "so when we say partition of vertices we"
    },
    {
      "start": "18:12",
      "end": "18:17",
      "text": "so when we say partition of vertices we need to get so we need we need to have a"
    },
    {
      "start": "18:17",
      "end": "18:17",
      "text": "need to get so we need we need to have a"
    },
    {
      "start": "18:17",
      "end": "18:24",
      "text": "need to get so we need we need to have a partition of the vertices into two parts"
    },
    {
      "start": "18:28",
      "end": "18:28",
      "text": "okay and two non empty parts so let's"
    },
    {
      "start": "18:28",
      "end": "18:32",
      "text": "okay and two non empty parts so let's say this is your Part A and this is Part"
    },
    {
      "start": "18:32",
      "end": "18:32",
      "text": "say this is your Part A and this is Part"
    },
    {
      "start": "18:32",
      "end": "18:39",
      "text": "say this is your Part A and this is Part B so a union B is your vertex collection"
    },
    {
      "start": "18:39",
      "end": "18:39",
      "text": "B so a union B is your vertex collection"
    },
    {
      "start": "18:39",
      "end": "18:44",
      "text": "B so a union B is your vertex collection of vertex vertex set and the edges so"
    },
    {
      "start": "18:44",
      "end": "18:44",
      "text": "of vertex vertex set and the edges so"
    },
    {
      "start": "18:44",
      "end": "18:46",
      "text": "of vertex vertex set and the edges so now if you look at the edges of the"
    },
    {
      "start": "18:46",
      "end": "18:46",
      "text": "now if you look at the edges of the"
    },
    {
      "start": "18:46",
      "end": "18:48",
      "text": "now if you look at the edges of the graph there are three kinds of edges"
    },
    {
      "start": "18:48",
      "end": "18:48",
      "text": "graph there are three kinds of edges"
    },
    {
      "start": "18:48",
      "end": "18:51",
      "text": "graph there are three kinds of edges edges which lie completely inside a"
    },
    {
      "start": "18:51",
      "end": "18:51",
      "text": "edges which lie completely inside a"
    },
    {
      "start": "18:51",
      "end": "18:56",
      "text": "edges which lie completely inside a edges with sly completely inside B and"
    },
    {
      "start": "18:56",
      "end": "18:56",
      "text": "edges with sly completely inside B and"
    },
    {
      "start": "18:56",
      "end": "18:59",
      "text": "edges with sly completely inside B and then there are edges which go from A to"
    },
    {
      "start": "18:59",
      "end": "18:59",
      "text": "then there are edges which go from A to"
    },
    {
      "start": "18:59",
      "end": "19:03",
      "text": "then there are edges which go from A to B these are the only three kinds of"
    },
    {
      "start": "19:03",
      "end": "19:03",
      "text": "B these are the only three kinds of"
    },
    {
      "start": "19:03",
      "end": "19:08",
      "text": "B these are the only three kinds of edges and these edges which go from one"
    },
    {
      "start": "19:08",
      "end": "19:08",
      "text": "edges and these edges which go from one"
    },
    {
      "start": "19:08",
      "end": "19:10",
      "text": "edges and these edges which go from one part of the cut to the other part is"
    },
    {
      "start": "19:10",
      "end": "19:10",
      "text": "part of the cut to the other part is"
    },
    {
      "start": "19:10",
      "end": "19:14",
      "text": "part of the cut to the other part is called as the cut ends okay so that"
    },
    {
      "start": "19:14",
      "end": "19:14",
      "text": "called as the cut ends okay so that"
    },
    {
      "start": "19:14",
      "end": "19:16",
      "text": "called as the cut ends okay so that essentially tells us what is the cut"
    },
    {
      "start": "19:16",
      "end": "19:16",
      "text": "essentially tells us what is the cut"
    },
    {
      "start": "19:16",
      "end": "19:20",
      "text": "essentially tells us what is the cut property look at all these edges these"
    },
    {
      "start": "19:20",
      "end": "19:20",
      "text": "property look at all these edges these"
    },
    {
      "start": "19:20",
      "end": "19:26",
      "text": "property look at all these edges these cut edges for any possible cut all such"
    },
    {
      "start": "19:26",
      "end": "19:26",
      "text": "cut edges for any possible cut all such"
    },
    {
      "start": "19:26",
      "end": "19:30",
      "text": "cut edges for any possible cut all such edges would essentially be part of every"
    },
    {
      "start": "19:30",
      "end": "19:30",
      "text": "edges would essentially be part of every"
    },
    {
      "start": "19:30",
      "end": "19:33",
      "text": "edges would essentially be part of every minimal spanning tree here we are"
    },
    {
      "start": "19:33",
      "end": "19:33",
      "text": "minimal spanning tree here we are"
    },
    {
      "start": "19:33",
      "end": "19:35",
      "text": "minimal spanning tree here we are assuming that the edge weights are"
    },
    {
      "start": "19:35",
      "end": "19:35",
      "text": "assuming that the edge weights are"
    },
    {
      "start": "19:35",
      "end": "19:38",
      "text": "assuming that the edge weights are distinct and therefore there will be a"
    },
    {
      "start": "19:38",
      "end": "19:38",
      "text": "distinct and therefore there will be a"
    },
    {
      "start": "19:38",
      "end": "19:41",
      "text": "distinct and therefore there will be a unique least weighted cut edge we can"
    },
    {
      "start": "19:41",
      "end": "19:41",
      "text": "unique least weighted cut edge we can"
    },
    {
      "start": "19:41",
      "end": "19:44",
      "text": "unique least weighted cut edge we can always relax these conditions for"
    },
    {
      "start": "19:44",
      "end": "19:44",
      "text": "always relax these conditions for"
    },
    {
      "start": "19:44",
      "end": "19:48",
      "text": "always relax these conditions for example if there are multiple edges"
    },
    {
      "start": "19:48",
      "end": "19:48",
      "text": "example if there are multiple edges"
    },
    {
      "start": "19:48",
      "end": "19:51",
      "text": "example if there are multiple edges carrying the same weight even then we"
    },
    {
      "start": "19:51",
      "end": "19:51",
      "text": "carrying the same weight even then we"
    },
    {
      "start": "19:51",
      "end": "19:53",
      "text": "carrying the same weight even then we can apply cut property for that what we"
    },
    {
      "start": "19:53",
      "end": "19:53",
      "text": "can apply cut property for that what we"
    },
    {
      "start": "19:53",
      "end": "19:58",
      "text": "can apply cut property for that what we need to guarantee is that for the cut"
    },
    {
      "start": "19:58",
      "end": "19:58",
      "text": "need to guarantee is that for the cut"
    },
    {
      "start": "19:58",
      "end": "20:01",
      "text": "need to guarantee is that for the cut that we have chosen there is a least"
    },
    {
      "start": "20:01",
      "end": "20:01",
      "text": "that we have chosen there is a least"
    },
    {
      "start": "20:01",
      "end": "20:05",
      "text": "that we have chosen there is a least weighted cut it there is a there is one"
    },
    {
      "start": "20:05",
      "end": "20:05",
      "text": "weighted cut it there is a there is one"
    },
    {
      "start": "20:05",
      "end": "20:08",
      "text": "weighted cut it there is a there is one cut it whose weight is strictly less"
    },
    {
      "start": "20:08",
      "end": "20:08",
      "text": "cut it whose weight is strictly less"
    },
    {
      "start": "20:08",
      "end": "20:09",
      "text": "cut it whose weight is strictly less than every other one and that cut edge"
    },
    {
      "start": "20:09",
      "end": "20:09",
      "text": "than every other one and that cut edge"
    },
    {
      "start": "20:09",
      "end": "20:12",
      "text": "than every other one and that cut edge should be present in everything else if"
    },
    {
      "start": "20:12",
      "end": "20:12",
      "text": "should be present in everything else if"
    },
    {
      "start": "20:12",
      "end": "20:15",
      "text": "should be present in everything else if you had multiple cut edges minimum ones"
    },
    {
      "start": "20:15",
      "end": "20:15",
      "text": "you had multiple cut edges minimum ones"
    },
    {
      "start": "20:15",
      "end": "20:17",
      "text": "you had multiple cut edges minimum ones minimal ones all having the same weight"
    },
    {
      "start": "20:17",
      "end": "20:17",
      "text": "minimal ones all having the same weight"
    },
    {
      "start": "20:17",
      "end": "20:21",
      "text": "minimal ones all having the same weight then what we can do mean that at best is"
    },
    {
      "start": "20:21",
      "end": "20:21",
      "text": "then what we can do mean that at best is"
    },
    {
      "start": "20:21",
      "end": "20:23",
      "text": "then what we can do mean that at best is that one of those"
    },
    {
      "start": "20:23",
      "end": "20:23",
      "text": "that one of those"
    },
    {
      "start": "20:23",
      "end": "20:26",
      "text": "that one of those would be part of every minimal spanning"
    },
    {
      "start": "20:26",
      "end": "20:26",
      "text": "would be part of every minimal spanning"
    },
    {
      "start": "20:26",
      "end": "20:33",
      "text": "would be part of every minimal spanning tree so let us look at some particular"
    },
    {
      "start": "20:33",
      "end": "20:33",
      "text": "tree so let us look at some particular"
    },
    {
      "start": "20:33",
      "end": "20:40",
      "text": "tree so let us look at some particular uses of them above lemma so if you look"
    },
    {
      "start": "20:40",
      "end": "20:40",
      "text": "uses of them above lemma so if you look"
    },
    {
      "start": "20:40",
      "end": "20:51",
      "text": "uses of them above lemma so if you look at the cut where vertex a is on one side"
    },
    {
      "start": "20:54",
      "end": "20:54",
      "text": "so if vertex a is on one side and"
    },
    {
      "start": "20:54",
      "end": "20:56",
      "text": "so if vertex a is on one side and everything else is on the other side"
    },
    {
      "start": "20:56",
      "end": "20:56",
      "text": "everything else is on the other side"
    },
    {
      "start": "20:56",
      "end": "20:59",
      "text": "everything else is on the other side okay and there are two edges which goes"
    },
    {
      "start": "20:59",
      "end": "20:59",
      "text": "okay and there are two edges which goes"
    },
    {
      "start": "20:59",
      "end": "21:01",
      "text": "okay and there are two edges which goes from this side to the other side namely"
    },
    {
      "start": "21:01",
      "end": "21:01",
      "text": "from this side to the other side namely"
    },
    {
      "start": "21:01",
      "end": "21:03",
      "text": "from this side to the other side namely the edge having weight one and the edge"
    },
    {
      "start": "21:03",
      "end": "21:03",
      "text": "the edge having weight one and the edge"
    },
    {
      "start": "21:03",
      "end": "21:06",
      "text": "the edge having weight one and the edge having weight to the cut property says"
    },
    {
      "start": "21:06",
      "end": "21:06",
      "text": "having weight to the cut property says"
    },
    {
      "start": "21:06",
      "end": "21:10",
      "text": "having weight to the cut property says that one must surely be present in all"
    },
    {
      "start": "21:10",
      "end": "21:10",
      "text": "that one must surely be present in all"
    },
    {
      "start": "21:10",
      "end": "21:15",
      "text": "that one must surely be present in all minimal spanning trees why is this so we"
    },
    {
      "start": "21:15",
      "end": "21:15",
      "text": "minimal spanning trees why is this so we"
    },
    {
      "start": "21:15",
      "end": "21:19",
      "text": "minimal spanning trees why is this so we will see shortly similarly if we had"
    },
    {
      "start": "21:19",
      "end": "21:19",
      "text": "will see shortly similarly if we had"
    },
    {
      "start": "21:19",
      "end": "21:22",
      "text": "will see shortly similarly if we had taken a and B as a cut has one side of"
    },
    {
      "start": "21:22",
      "end": "21:22",
      "text": "taken a and B as a cut has one side of"
    },
    {
      "start": "21:22",
      "end": "21:25",
      "text": "taken a and B as a cut has one side of the cut and rests everything on the"
    },
    {
      "start": "21:25",
      "end": "21:25",
      "text": "the cut and rests everything on the"
    },
    {
      "start": "21:25",
      "end": "21:35",
      "text": "the cut and rests everything on the other side or abd on one side and CEF on"
    },
    {
      "start": "21:35",
      "end": "21:35",
      "text": "other side or abd on one side and CEF on"
    },
    {
      "start": "21:35",
      "end": "21:37",
      "text": "other side or abd on one side and CEF on the other side and there are two cut"
    },
    {
      "start": "21:37",
      "end": "21:37",
      "text": "the other side and there are two cut"
    },
    {
      "start": "21:37",
      "end": "21:40",
      "text": "the other side and there are two cut edges namely the edge four and the edge"
    },
    {
      "start": "21:40",
      "end": "21:40",
      "text": "edges namely the edge four and the edge"
    },
    {
      "start": "21:40",
      "end": "21:43",
      "text": "edges namely the edge four and the edge five sorry the edge having weighed four"
    },
    {
      "start": "21:43",
      "end": "21:43",
      "text": "five sorry the edge having weighed four"
    },
    {
      "start": "21:43",
      "end": "21:46",
      "text": "five sorry the edge having weighed four and they are shying away - and we can"
    },
    {
      "start": "21:46",
      "end": "21:46",
      "text": "and they are shying away - and we can"
    },
    {
      "start": "21:46",
      "end": "21:51",
      "text": "and they are shying away - and we can say that the edge BC will surely be part"
    },
    {
      "start": "21:51",
      "end": "21:51",
      "text": "say that the edge BC will surely be part"
    },
    {
      "start": "21:51",
      "end": "21:57",
      "text": "say that the edge BC will surely be part of every minimal spanning tree"
    },
    {
      "start": "22:00",
      "end": "22:00",
      "text": "now let's see how we can prove cut"
    },
    {
      "start": "22:00",
      "end": "22:09",
      "text": "now let's see how we can prove cut property"
    },
    {
      "start": "22:14",
      "end": "22:14",
      "text": "now suppose the cut properties Falls"
    },
    {
      "start": "22:14",
      "end": "22:18",
      "text": "now suppose the cut properties Falls what does it mean that means there is"
    },
    {
      "start": "22:18",
      "end": "22:18",
      "text": "what does it mean that means there is"
    },
    {
      "start": "22:18",
      "end": "22:21",
      "text": "what does it mean that means there is some particular edge which is the least"
    },
    {
      "start": "22:21",
      "end": "22:21",
      "text": "some particular edge which is the least"
    },
    {
      "start": "22:21",
      "end": "22:25",
      "text": "some particular edge which is the least weighted cottage but is still not"
    },
    {
      "start": "22:25",
      "end": "22:25",
      "text": "weighted cottage but is still not"
    },
    {
      "start": "22:25",
      "end": "22:29",
      "text": "weighted cottage but is still not present in the minimal spanning tree so"
    },
    {
      "start": "22:29",
      "end": "22:29",
      "text": "present in the minimal spanning tree so"
    },
    {
      "start": "22:29",
      "end": "22:35",
      "text": "present in the minimal spanning tree so suppose let's say the edge e is equal to"
    },
    {
      "start": "22:35",
      "end": "22:35",
      "text": "suppose let's say the edge e is equal to"
    },
    {
      "start": "22:35",
      "end": "22:46",
      "text": "suppose let's say the edge e is equal to u comma V is the minimum weighted cut"
    },
    {
      "start": "22:46",
      "end": "22:46",
      "text": "u comma V is the minimum weighted cut"
    },
    {
      "start": "22:46",
      "end": "22:50",
      "text": "u comma V is the minimum weighted cut edge okay across let's say the cut we"
    },
    {
      "start": "22:50",
      "end": "22:50",
      "text": "edge okay across let's say the cut we"
    },
    {
      "start": "22:50",
      "end": "22:52",
      "text": "edge okay across let's say the cut we will call it as a comma B cut it means"
    },
    {
      "start": "22:52",
      "end": "22:52",
      "text": "will call it as a comma B cut it means"
    },
    {
      "start": "22:52",
      "end": "22:53",
      "text": "will call it as a comma B cut it means one side is there and the other side is"
    },
    {
      "start": "22:53",
      "end": "22:53",
      "text": "one side is there and the other side is"
    },
    {
      "start": "22:53",
      "end": "22:58",
      "text": "one side is there and the other side is B and a let us say a contains u and B"
    },
    {
      "start": "22:58",
      "end": "22:58",
      "text": "B and a let us say a contains u and B"
    },
    {
      "start": "22:58",
      "end": "23:01",
      "text": "B and a let us say a contains u and B contains we okay that is how that's how"
    },
    {
      "start": "23:01",
      "end": "23:01",
      "text": "contains we okay that is how that's how"
    },
    {
      "start": "23:01",
      "end": "23:09",
      "text": "contains we okay that is how that's how you V is a cut edge and suppose E does"
    },
    {
      "start": "23:09",
      "end": "23:09",
      "text": "you V is a cut edge and suppose E does"
    },
    {
      "start": "23:09",
      "end": "23:16",
      "text": "you V is a cut edge and suppose E does not belong to MST so let's just draw the"
    },
    {
      "start": "23:16",
      "end": "23:16",
      "text": "not belong to MST so let's just draw the"
    },
    {
      "start": "23:16",
      "end": "23:22",
      "text": "not belong to MST so let's just draw the MST so some tree is there and then if"
    },
    {
      "start": "23:22",
      "end": "23:22",
      "text": "MST so some tree is there and then if"
    },
    {
      "start": "23:22",
      "end": "23:25",
      "text": "MST so some tree is there and then if you add this edge into it what will"
    },
    {
      "start": "23:25",
      "end": "23:25",
      "text": "you add this edge into it what will"
    },
    {
      "start": "23:25",
      "end": "23:28",
      "text": "you add this edge into it what will happen is that's going to create a cycle"
    },
    {
      "start": "23:28",
      "end": "23:28",
      "text": "happen is that's going to create a cycle"
    },
    {
      "start": "23:28",
      "end": "23:33",
      "text": "happen is that's going to create a cycle okay because the spanning tree by virtue"
    },
    {
      "start": "23:33",
      "end": "23:33",
      "text": "okay because the spanning tree by virtue"
    },
    {
      "start": "23:33",
      "end": "23:35",
      "text": "okay because the spanning tree by virtue of this being a spanning tree there is"
    },
    {
      "start": "23:35",
      "end": "23:35",
      "text": "of this being a spanning tree there is"
    },
    {
      "start": "23:35",
      "end": "23:39",
      "text": "of this being a spanning tree there is already a path between U and V okay"
    },
    {
      "start": "23:39",
      "end": "23:39",
      "text": "already a path between U and V okay"
    },
    {
      "start": "23:39",
      "end": "23:41",
      "text": "already a path between U and V okay because every vertex was present and"
    },
    {
      "start": "23:41",
      "end": "23:41",
      "text": "because every vertex was present and"
    },
    {
      "start": "23:41",
      "end": "23:46",
      "text": "because every vertex was present and this is the tree now if you add the edge"
    },
    {
      "start": "23:46",
      "end": "23:46",
      "text": "this is the tree now if you add the edge"
    },
    {
      "start": "23:46",
      "end": "23:58",
      "text": "this is the tree now if you add the edge UV that's going to create a cycle"
    },
    {
      "start": "24:08",
      "end": "24:08",
      "text": "now can we somehow say that the minimal"
    },
    {
      "start": "24:08",
      "end": "24:09",
      "text": "now can we somehow say that the minimal spanning tree that you currently have is"
    },
    {
      "start": "24:09",
      "end": "24:09",
      "text": "spanning tree that you currently have is"
    },
    {
      "start": "24:09",
      "end": "24:18",
      "text": "spanning tree that you currently have is not the optimal spanning tree"
    },
    {
      "start": "24:21",
      "end": "24:21",
      "text": "so this diagram was our spanning tree T"
    },
    {
      "start": "24:21",
      "end": "24:24",
      "text": "so this diagram was our spanning tree T and we are assuming that UV is a minimum"
    },
    {
      "start": "24:24",
      "end": "24:24",
      "text": "and we are assuming that UV is a minimum"
    },
    {
      "start": "24:24",
      "end": "24:27",
      "text": "and we are assuming that UV is a minimum weighted cutted now minimum rated"
    },
    {
      "start": "24:27",
      "end": "24:27",
      "text": "weighted cutted now minimum rated"
    },
    {
      "start": "24:27",
      "end": "24:28",
      "text": "weighted cutted now minimum rated cartridge means it is across some"
    },
    {
      "start": "24:28",
      "end": "24:28",
      "text": "cartridge means it is across some"
    },
    {
      "start": "24:28",
      "end": "24:33",
      "text": "cartridge means it is across some particular cutting a comma B and we want"
    },
    {
      "start": "24:33",
      "end": "24:33",
      "text": "particular cutting a comma B and we want"
    },
    {
      "start": "24:33",
      "end": "24:37",
      "text": "particular cutting a comma B and we want to identify those vertices so let us"
    },
    {
      "start": "24:37",
      "end": "24:37",
      "text": "to identify those vertices so let us"
    },
    {
      "start": "24:37",
      "end": "24:51",
      "text": "to identify those vertices so let us first draw the diagram"
    },
    {
      "start": "25:01",
      "end": "25:01",
      "text": "on top of this diagram given the layout"
    },
    {
      "start": "25:01",
      "end": "25:05",
      "text": "on top of this diagram given the layout are three so three will you have some"
    },
    {
      "start": "25:05",
      "end": "25:05",
      "text": "are three so three will you have some"
    },
    {
      "start": "25:05",
      "end": "25:07",
      "text": "are three so three will you have some edges on the a side some edges on the B"
    },
    {
      "start": "25:07",
      "end": "25:07",
      "text": "edges on the a side some edges on the B"
    },
    {
      "start": "25:07",
      "end": "25:10",
      "text": "edges on the a side some edges on the B side and surely because it is a tree"
    },
    {
      "start": "25:10",
      "end": "25:10",
      "text": "side and surely because it is a tree"
    },
    {
      "start": "25:10",
      "end": "25:13",
      "text": "side and surely because it is a tree there are going to be edges going from"
    },
    {
      "start": "25:13",
      "end": "25:13",
      "text": "there are going to be edges going from"
    },
    {
      "start": "25:13",
      "end": "25:18",
      "text": "there are going to be edges going from one side to the other"
    },
    {
      "start": "25:24",
      "end": "25:24",
      "text": "now what we are guaranteed by our"
    },
    {
      "start": "25:24",
      "end": "25:28",
      "text": "now what we are guaranteed by our assumptions is that UV is not one of the"
    },
    {
      "start": "25:28",
      "end": "25:28",
      "text": "assumptions is that UV is not one of the"
    },
    {
      "start": "25:28",
      "end": "25:33",
      "text": "assumptions is that UV is not one of the edges but if you add UV to this that's"
    },
    {
      "start": "25:33",
      "end": "25:33",
      "text": "edges but if you add UV to this that's"
    },
    {
      "start": "25:33",
      "end": "25:36",
      "text": "edges but if you add UV to this that's going to create a cycle okay so let's"
    },
    {
      "start": "25:36",
      "end": "25:36",
      "text": "going to create a cycle okay so let's"
    },
    {
      "start": "25:36",
      "end": "25:40",
      "text": "going to create a cycle okay so let's just add the edge UV so suppose you is"
    },
    {
      "start": "25:40",
      "end": "25:40",
      "text": "just add the edge UV so suppose you is"
    },
    {
      "start": "25:40",
      "end": "25:43",
      "text": "just add the edge UV so suppose you is this and V is this we add UV to this"
    },
    {
      "start": "25:43",
      "end": "25:43",
      "text": "this and V is this we add UV to this"
    },
    {
      "start": "25:43",
      "end": "25:46",
      "text": "this and V is this we add UV to this that's going to create a cycle and in"
    },
    {
      "start": "25:46",
      "end": "25:46",
      "text": "that's going to create a cycle and in"
    },
    {
      "start": "25:46",
      "end": "25:49",
      "text": "that's going to create a cycle and in this cycle by virtue of this being a"
    },
    {
      "start": "25:49",
      "end": "25:49",
      "text": "this cycle by virtue of this being a"
    },
    {
      "start": "25:49",
      "end": "25:52",
      "text": "this cycle by virtue of this being a cycle the ravine if you just trace the"
    },
    {
      "start": "25:52",
      "end": "25:52",
      "text": "cycle the ravine if you just trace the"
    },
    {
      "start": "25:52",
      "end": "25:57",
      "text": "cycle the ravine if you just trace the edges there is a path from V to u ok u"
    },
    {
      "start": "25:57",
      "end": "25:57",
      "text": "edges there is a path from V to u ok u"
    },
    {
      "start": "25:57",
      "end": "25:59",
      "text": "edges there is a path from V to u ok u to V is an edge that we had added and"
    },
    {
      "start": "25:59",
      "end": "25:59",
      "text": "to V is an edge that we had added and"
    },
    {
      "start": "25:59",
      "end": "26:02",
      "text": "to V is an edge that we had added and surely there's a path from V to u and"
    },
    {
      "start": "26:02",
      "end": "26:02",
      "text": "surely there's a path from V to u and"
    },
    {
      "start": "26:02",
      "end": "26:05",
      "text": "surely there's a path from V to u and that path should surely cross the cut at"
    },
    {
      "start": "26:05",
      "end": "26:05",
      "text": "that path should surely cross the cut at"
    },
    {
      "start": "26:05",
      "end": "26:08",
      "text": "that path should surely cross the cut at some point okay that means there is an"
    },
    {
      "start": "26:08",
      "end": "26:08",
      "text": "some point okay that means there is an"
    },
    {
      "start": "26:08",
      "end": "26:11",
      "text": "some point okay that means there is an edge which starts in B and ends up in a"
    },
    {
      "start": "26:11",
      "end": "26:11",
      "text": "edge which starts in B and ends up in a"
    },
    {
      "start": "26:11",
      "end": "26:14",
      "text": "edge which starts in B and ends up in a by virtue of that being a cut edge for"
    },
    {
      "start": "26:14",
      "end": "26:14",
      "text": "by virtue of that being a cut edge for"
    },
    {
      "start": "26:14",
      "end": "26:17",
      "text": "by virtue of that being a cut edge for the cut a B it's weight so let's call"
    },
    {
      "start": "26:17",
      "end": "26:17",
      "text": "the cut a B it's weight so let's call"
    },
    {
      "start": "26:17",
      "end": "26:20",
      "text": "the cut a B it's weight so let's call this as e prime weight of E prime is"
    },
    {
      "start": "26:20",
      "end": "26:20",
      "text": "this as e prime weight of E prime is"
    },
    {
      "start": "26:20",
      "end": "26:25",
      "text": "this as e prime weight of E prime is going to be greater than weight of E so"
    },
    {
      "start": "26:25",
      "end": "26:25",
      "text": "going to be greater than weight of E so"
    },
    {
      "start": "26:25",
      "end": "26:27",
      "text": "going to be greater than weight of E so now let's imagine the tree which is"
    },
    {
      "start": "26:27",
      "end": "26:27",
      "text": "now let's imagine the tree which is"
    },
    {
      "start": "26:27",
      "end": "26:32",
      "text": "now let's imagine the tree which is obtained by removing the edge E prime so"
    },
    {
      "start": "26:32",
      "end": "26:32",
      "text": "obtained by removing the edge E prime so"
    },
    {
      "start": "26:32",
      "end": "26:35",
      "text": "obtained by removing the edge E prime so this edge we are throwing out and we are"
    },
    {
      "start": "26:35",
      "end": "26:35",
      "text": "this edge we are throwing out and we are"
    },
    {
      "start": "26:35",
      "end": "26:40",
      "text": "this edge we are throwing out and we are in place of that adding the UV edge now"
    },
    {
      "start": "26:40",
      "end": "26:40",
      "text": "in place of that adding the UV edge now"
    },
    {
      "start": "26:40",
      "end": "26:42",
      "text": "in place of that adding the UV edge now we will shame that the new object is"
    },
    {
      "start": "26:42",
      "end": "26:42",
      "text": "we will shame that the new object is"
    },
    {
      "start": "26:42",
      "end": "26:45",
      "text": "we will shame that the new object is going to be a tree it's going to be a"
    },
    {
      "start": "26:45",
      "end": "26:45",
      "text": "going to be a tree it's going to be a"
    },
    {
      "start": "26:45",
      "end": "26:46",
      "text": "going to be a tree it's going to be a tree because this doesn't contain any"
    },
    {
      "start": "26:46",
      "end": "26:46",
      "text": "tree because this doesn't contain any"
    },
    {
      "start": "26:46",
      "end": "26:49",
      "text": "tree because this doesn't contain any cycle the only cycle that was there was"
    },
    {
      "start": "26:49",
      "end": "26:49",
      "text": "cycle the only cycle that was there was"
    },
    {
      "start": "26:49",
      "end": "26:53",
      "text": "cycle the only cycle that was there was the cycle that we got by adding UV that"
    },
    {
      "start": "26:53",
      "end": "26:53",
      "text": "the cycle that we got by adding UV that"
    },
    {
      "start": "26:53",
      "end": "26:56",
      "text": "the cycle that we got by adding UV that cycle has been destroyed by removing the"
    },
    {
      "start": "26:56",
      "end": "26:56",
      "text": "cycle has been destroyed by removing the"
    },
    {
      "start": "26:56",
      "end": "26:57",
      "text": "cycle has been destroyed by removing the edge E prime so this is a cycle-free"
    },
    {
      "start": "26:57",
      "end": "26:57",
      "text": "edge E prime so this is a cycle-free"
    },
    {
      "start": "26:57",
      "end": "27:00",
      "text": "edge E prime so this is a cycle-free graph and every vertex which is"
    },
    {
      "start": "27:00",
      "end": "27:00",
      "text": "graph and every vertex which is"
    },
    {
      "start": "27:00",
      "end": "27:02",
      "text": "graph and every vertex which is connected earlier still remains"
    },
    {
      "start": "27:02",
      "end": "27:02",
      "text": "connected earlier still remains"
    },
    {
      "start": "27:02",
      "end": "27:04",
      "text": "connected earlier still remains connected so this is a new tree and the"
    },
    {
      "start": "27:04",
      "end": "27:04",
      "text": "connected so this is a new tree and the"
    },
    {
      "start": "27:04",
      "end": "27:05",
      "text": "connected so this is a new tree and the way"
    },
    {
      "start": "27:05",
      "end": "27:05",
      "text": "way"
    },
    {
      "start": "27:05",
      "end": "27:07",
      "text": "way of this particular tree so let us say"
    },
    {
      "start": "27:07",
      "end": "27:07",
      "text": "of this particular tree so let us say"
    },
    {
      "start": "27:07",
      "end": "27:10",
      "text": "of this particular tree so let us say the new tree is T prime rate of T prime"
    },
    {
      "start": "27:10",
      "end": "27:10",
      "text": "the new tree is T prime rate of T prime"
    },
    {
      "start": "27:10",
      "end": "27:18",
      "text": "the new tree is T prime rate of T prime is equal to weight of T plus weight of"
    },
    {
      "start": "27:18",
      "end": "27:18",
      "text": "is equal to weight of T plus weight of"
    },
    {
      "start": "27:18",
      "end": "27:25",
      "text": "is equal to weight of T plus weight of UV minus weight of B prime but e Prime's"
    },
    {
      "start": "27:25",
      "end": "27:25",
      "text": "UV minus weight of B prime but e Prime's"
    },
    {
      "start": "27:25",
      "end": "27:27",
      "text": "UV minus weight of B prime but e Prime's weight is going to be greater than the"
    },
    {
      "start": "27:27",
      "end": "27:27",
      "text": "weight is going to be greater than the"
    },
    {
      "start": "27:27",
      "end": "27:31",
      "text": "weight is going to be greater than the weight of UV or the edge E and therefore"
    },
    {
      "start": "27:31",
      "end": "27:31",
      "text": "weight of UV or the edge E and therefore"
    },
    {
      "start": "27:31",
      "end": "27:35",
      "text": "weight of UV or the edge E and therefore this quantity is a negative quantity so"
    },
    {
      "start": "27:35",
      "end": "27:35",
      "text": "this quantity is a negative quantity so"
    },
    {
      "start": "27:35",
      "end": "27:37",
      "text": "this quantity is a negative quantity so weight of t plus a negative quantity"
    },
    {
      "start": "27:37",
      "end": "27:37",
      "text": "weight of t plus a negative quantity"
    },
    {
      "start": "27:37",
      "end": "27:38",
      "text": "weight of t plus a negative quantity will give you the weight of T Prime and"
    },
    {
      "start": "27:38",
      "end": "27:38",
      "text": "will give you the weight of T Prime and"
    },
    {
      "start": "27:38",
      "end": "27:42",
      "text": "will give you the weight of T Prime and this contradicts the assumption that tip"
    },
    {
      "start": "27:42",
      "end": "27:42",
      "text": "this contradicts the assumption that tip"
    },
    {
      "start": "27:42",
      "end": "27:45",
      "text": "this contradicts the assumption that tip was the tree having least weight so it's"
    },
    {
      "start": "27:45",
      "end": "27:45",
      "text": "was the tree having least weight so it's"
    },
    {
      "start": "27:45",
      "end": "27:47",
      "text": "was the tree having least weight so it's not a minimal spanning this argument"
    },
    {
      "start": "27:47",
      "end": "27:47",
      "text": "not a minimal spanning this argument"
    },
    {
      "start": "27:47",
      "end": "27:49",
      "text": "not a minimal spanning this argument tells us that T cannot be the minimal"
    },
    {
      "start": "27:49",
      "end": "27:49",
      "text": "tells us that T cannot be the minimal"
    },
    {
      "start": "27:49",
      "end": "27:52",
      "text": "tells us that T cannot be the minimal spanning tree because we have found one"
    },
    {
      "start": "27:52",
      "end": "27:52",
      "text": "spanning tree because we have found one"
    },
    {
      "start": "27:52",
      "end": "27:54",
      "text": "spanning tree because we have found one particular tree whose weight is strictly"
    },
    {
      "start": "27:54",
      "end": "27:54",
      "text": "particular tree whose weight is strictly"
    },
    {
      "start": "27:54",
      "end": "27:58",
      "text": "particular tree whose weight is strictly less than that of T that's the proof of"
    },
    {
      "start": "27:58",
      "end": "27:58",
      "text": "less than that of T that's the proof of"
    },
    {
      "start": "27:58",
      "end": "28:03",
      "text": "less than that of T that's the proof of cut property so construct any possible"
    },
    {
      "start": "28:03",
      "end": "28:03",
      "text": "cut property so construct any possible"
    },
    {
      "start": "28:03",
      "end": "28:07",
      "text": "cut property so construct any possible cut split the vertices into any possible"
    },
    {
      "start": "28:07",
      "end": "28:07",
      "text": "cut split the vertices into any possible"
    },
    {
      "start": "28:07",
      "end": "28:09",
      "text": "cut split the vertices into any possible manner and look at the edges which goes"
    },
    {
      "start": "28:09",
      "end": "28:09",
      "text": "manner and look at the edges which goes"
    },
    {
      "start": "28:09",
      "end": "28:10",
      "text": "manner and look at the edges which goes from one side of the cut to the other"
    },
    {
      "start": "28:10",
      "end": "28:10",
      "text": "from one side of the cut to the other"
    },
    {
      "start": "28:10",
      "end": "28:12",
      "text": "from one side of the cut to the other and amongst those the least weighted"
    },
    {
      "start": "28:12",
      "end": "28:12",
      "text": "and amongst those the least weighted"
    },
    {
      "start": "28:12",
      "end": "28:15",
      "text": "and amongst those the least weighted edge surely is going to be present in"
    },
    {
      "start": "28:15",
      "end": "28:15",
      "text": "edge surely is going to be present in"
    },
    {
      "start": "28:15",
      "end": "28:17",
      "text": "edge surely is going to be present in all minimal spanning trees that's the"
    },
    {
      "start": "28:17",
      "end": "28:17",
      "text": "all minimal spanning trees that's the"
    },
    {
      "start": "28:17",
      "end": "28:21",
      "text": "all minimal spanning trees that's the cut property okay later on we will see"
    },
    {
      "start": "28:21",
      "end": "28:21",
      "text": "cut property okay later on we will see"
    },
    {
      "start": "28:21",
      "end": "28:23",
      "text": "cut property okay later on we will see how we can repeatedly use this cut"
    },
    {
      "start": "28:23",
      "end": "28:23",
      "text": "how we can repeatedly use this cut"
    },
    {
      "start": "28:23",
      "end": "28:27",
      "text": "how we can repeatedly use this cut property and construct the minimal"
    },
    {
      "start": "28:27",
      "end": "28:27",
      "text": "property and construct the minimal"
    },
    {
      "start": "28:27",
      "end": "28:32",
      "text": "property and construct the minimal spanning tree of any graph the next"
    },
    {
      "start": "28:32",
      "end": "28:32",
      "text": "spanning tree of any graph the next"
    },
    {
      "start": "28:32",
      "end": "28:34",
      "text": "spanning tree of any graph the next property which will which is again going"
    },
    {
      "start": "28:34",
      "end": "28:34",
      "text": "property which will which is again going"
    },
    {
      "start": "28:34",
      "end": "28:36",
      "text": "property which will which is again going to be a useful property for constructing"
    },
    {
      "start": "28:36",
      "end": "28:36",
      "text": "to be a useful property for constructing"
    },
    {
      "start": "28:36",
      "end": "28:38",
      "text": "to be a useful property for constructing minimal spanning tree is the cycle"
    },
    {
      "start": "28:38",
      "end": "28:38",
      "text": "minimal spanning tree is the cycle"
    },
    {
      "start": "28:38",
      "end": "28:45",
      "text": "minimal spanning tree is the cycle property"
    },
    {
      "start": "28:48",
      "end": "28:48",
      "text": "so consider recycle in any graph any"
    },
    {
      "start": "28:48",
      "end": "28:50",
      "text": "so consider recycle in any graph any weighted graph and look at the maximum"
    },
    {
      "start": "28:50",
      "end": "28:50",
      "text": "weighted graph and look at the maximum"
    },
    {
      "start": "28:50",
      "end": "28:55",
      "text": "weighted graph and look at the maximum weighted edge in that cycle make a guess"
    },
    {
      "start": "28:55",
      "end": "28:55",
      "text": "weighted edge in that cycle make a guess"
    },
    {
      "start": "28:55",
      "end": "28:57",
      "text": "weighted edge in that cycle make a guess as to whether that edge will be present"
    },
    {
      "start": "28:57",
      "end": "28:57",
      "text": "as to whether that edge will be present"
    },
    {
      "start": "28:57",
      "end": "29:00",
      "text": "as to whether that edge will be present or absent in minimal spanning trees"
    },
    {
      "start": "29:00",
      "end": "29:00",
      "text": "or absent in minimal spanning trees"
    },
    {
      "start": "29:00",
      "end": "29:05",
      "text": "or absent in minimal spanning trees cycling property states that max"
    },
    {
      "start": "29:05",
      "end": "29:05",
      "text": "cycling property states that max"
    },
    {
      "start": "29:05",
      "end": "29:16",
      "text": "cycling property states that max weighted edge will not be part of any"
    },
    {
      "start": "29:16",
      "end": "29:16",
      "text": "weighted edge will not be part of any"
    },
    {
      "start": "29:16",
      "end": "29:21",
      "text": "weighted edge will not be part of any minimal spanning tree okay so how do we"
    },
    {
      "start": "29:21",
      "end": "29:21",
      "text": "minimal spanning tree okay so how do we"
    },
    {
      "start": "29:21",
      "end": "29:29",
      "text": "minimal spanning tree okay so how do we prove this let's take a graph D and"
    },
    {
      "start": "29:29",
      "end": "29:29",
      "text": "prove this let's take a graph D and"
    },
    {
      "start": "29:29",
      "end": "29:37",
      "text": "prove this let's take a graph D and suppose the sightly property is false"
    },
    {
      "start": "29:39",
      "end": "29:39",
      "text": "before we go into the proof let's see a"
    },
    {
      "start": "29:39",
      "end": "29:47",
      "text": "before we go into the proof let's see a couple of examples so in this particular"
    },
    {
      "start": "29:47",
      "end": "29:47",
      "text": "couple of examples so in this particular"
    },
    {
      "start": "29:47",
      "end": "29:53",
      "text": "couple of examples so in this particular diagram in this graph G if we look at dB"
    },
    {
      "start": "29:53",
      "end": "29:53",
      "text": "diagram in this graph G if we look at dB"
    },
    {
      "start": "29:53",
      "end": "29:55",
      "text": "diagram in this graph G if we look at dB that's the maximum weighted edge of the"
    },
    {
      "start": "29:55",
      "end": "29:55",
      "text": "that's the maximum weighted edge of the"
    },
    {
      "start": "29:55",
      "end": "29:59",
      "text": "that's the maximum weighted edge of the cycle involving edges with weight 1 2 &amp;"
    },
    {
      "start": "29:59",
      "end": "29:59",
      "text": "cycle involving edges with weight 1 2 &amp;"
    },
    {
      "start": "29:59",
      "end": "30:06",
      "text": "cycle involving edges with weight 1 2 &amp; 3 so the edge marked in green cannot be"
    },
    {
      "start": "30:06",
      "end": "30:06",
      "text": "3 so the edge marked in green cannot be"
    },
    {
      "start": "30:06",
      "end": "30:09",
      "text": "3 so the edge marked in green cannot be present zetsu cannot be present because"
    },
    {
      "start": "30:09",
      "end": "30:09",
      "text": "present zetsu cannot be present because"
    },
    {
      "start": "30:09",
      "end": "30:11",
      "text": "present zetsu cannot be present because it's a maximum weight arranged the same"
    },
    {
      "start": "30:11",
      "end": "30:11",
      "text": "it's a maximum weight arranged the same"
    },
    {
      "start": "30:11",
      "end": "30:15",
      "text": "it's a maximum weight arranged the same applies to the edge EC because that's"
    },
    {
      "start": "30:15",
      "end": "30:15",
      "text": "applies to the edge EC because that's"
    },
    {
      "start": "30:15",
      "end": "30:16",
      "text": "applies to the edge EC because that's also the maximum weighted edge is the"
    },
    {
      "start": "30:16",
      "end": "30:16",
      "text": "also the maximum weighted edge is the"
    },
    {
      "start": "30:16",
      "end": "30:23",
      "text": "also the maximum weighted edge is the cycle BCE D and EF is also not part of a"
    },
    {
      "start": "30:23",
      "end": "30:23",
      "text": "cycle BCE D and EF is also not part of a"
    },
    {
      "start": "30:23",
      "end": "30:26",
      "text": "cycle BCE D and EF is also not part of a minimal spanning tree of part of any"
    },
    {
      "start": "30:26",
      "end": "30:26",
      "text": "minimal spanning tree of part of any"
    },
    {
      "start": "30:26",
      "end": "30:28",
      "text": "minimal spanning tree of part of any minimal spanning tree because that's the"
    },
    {
      "start": "30:28",
      "end": "30:28",
      "text": "minimal spanning tree because that's the"
    },
    {
      "start": "30:28",
      "end": "30:34",
      "text": "minimal spanning tree because that's the maximum weighted edge of the cycle C F e"
    },
    {
      "start": "30:39",
      "end": "30:39",
      "text": "ok so in this diagram in this graph if"
    },
    {
      "start": "30:39",
      "end": "30:41",
      "text": "ok so in this diagram in this graph if you look at the edges that has been"
    },
    {
      "start": "30:41",
      "end": "30:41",
      "text": "you look at the edges that has been"
    },
    {
      "start": "30:41",
      "end": "30:45",
      "text": "you look at the edges that has been excluded they are fit to be excluded"
    },
    {
      "start": "30:45",
      "end": "30:45",
      "text": "excluded they are fit to be excluded"
    },
    {
      "start": "30:45",
      "end": "30:47",
      "text": "excluded they are fit to be excluded none of those edges can be part of any"
    },
    {
      "start": "30:47",
      "end": "30:47",
      "text": "none of those edges can be part of any"
    },
    {
      "start": "30:47",
      "end": "30:50",
      "text": "none of those edges can be part of any minimal spanning tree and therefore if"
    },
    {
      "start": "30:50",
      "end": "30:50",
      "text": "minimal spanning tree and therefore if"
    },
    {
      "start": "30:50",
      "end": "30:52",
      "text": "minimal spanning tree and therefore if you look at the remaining edges they"
    },
    {
      "start": "30:52",
      "end": "30:52",
      "text": "you look at the remaining edges they"
    },
    {
      "start": "30:52",
      "end": "30:54",
      "text": "you look at the remaining edges they must be part of every minimal spanning"
    },
    {
      "start": "30:54",
      "end": "30:54",
      "text": "must be part of every minimal spanning"
    },
    {
      "start": "30:54",
      "end": "30:58",
      "text": "must be part of every minimal spanning tree okay reason being if you remove any"
    },
    {
      "start": "30:58",
      "end": "30:58",
      "text": "tree okay reason being if you remove any"
    },
    {
      "start": "30:58",
      "end": "30:59",
      "text": "tree okay reason being if you remove any one of them"
    },
    {
      "start": "30:59",
      "end": "30:59",
      "text": "one of them"
    },
    {
      "start": "30:59",
      "end": "31:02",
      "text": "one of them there is no other edge that you can add"
    },
    {
      "start": "31:02",
      "end": "31:02",
      "text": "there is no other edge that you can add"
    },
    {
      "start": "31:02",
      "end": "31:06",
      "text": "there is no other edge that you can add to make this graph connected so this"
    },
    {
      "start": "31:06",
      "end": "31:06",
      "text": "to make this graph connected so this"
    },
    {
      "start": "31:06",
      "end": "31:09",
      "text": "to make this graph connected so this tree indicated by the blue lines are"
    },
    {
      "start": "31:09",
      "end": "31:09",
      "text": "tree indicated by the blue lines are"
    },
    {
      "start": "31:09",
      "end": "31:11",
      "text": "tree indicated by the blue lines are going to be the unique minimal spanning"
    },
    {
      "start": "31:11",
      "end": "31:11",
      "text": "going to be the unique minimal spanning"
    },
    {
      "start": "31:11",
      "end": "31:16",
      "text": "going to be the unique minimal spanning tree now let's see bicycling properties"
    },
    {
      "start": "31:16",
      "end": "31:16",
      "text": "tree now let's see bicycling properties"
    },
    {
      "start": "31:16",
      "end": "31:22",
      "text": "tree now let's see bicycling properties true let's see a proof of cycle property"
    },
    {
      "start": "31:25",
      "end": "31:25",
      "text": "so suppose cycling property is false"
    },
    {
      "start": "31:25",
      "end": "31:42",
      "text": "so suppose cycling property is false what does it mean that means"
    },
    {
      "start": "31:48",
      "end": "31:48",
      "text": "there exists a cycle such that E is the"
    },
    {
      "start": "31:48",
      "end": "31:57",
      "text": "there exists a cycle such that E is the maximum weight edge of that cycle and he"
    },
    {
      "start": "31:57",
      "end": "31:57",
      "text": "maximum weight edge of that cycle and he"
    },
    {
      "start": "31:57",
      "end": "31:59",
      "text": "maximum weight edge of that cycle and he belongs to the minimal spanning tree"
    },
    {
      "start": "31:59",
      "end": "31:59",
      "text": "belongs to the minimal spanning tree"
    },
    {
      "start": "31:59",
      "end": "32:01",
      "text": "belongs to the minimal spanning tree let's call the minimal spanning tree s T"
    },
    {
      "start": "32:01",
      "end": "32:01",
      "text": "let's call the minimal spanning tree s T"
    },
    {
      "start": "32:01",
      "end": "32:05",
      "text": "let's call the minimal spanning tree s T so e belongs to t e is an edge of the"
    },
    {
      "start": "32:05",
      "end": "32:05",
      "text": "so e belongs to t e is an edge of the"
    },
    {
      "start": "32:05",
      "end": "32:08",
      "text": "so e belongs to t e is an edge of the tree T ok this should give us a"
    },
    {
      "start": "32:08",
      "end": "32:08",
      "text": "tree T ok this should give us a"
    },
    {
      "start": "32:08",
      "end": "32:16",
      "text": "tree T ok this should give us a contradiction so let's look at our three"
    },
    {
      "start": "32:16",
      "end": "32:16",
      "text": "contradiction so let's look at our three"
    },
    {
      "start": "32:16",
      "end": "32:24",
      "text": "contradiction so let's look at our three we'll draw it out and some particular"
    },
    {
      "start": "32:24",
      "end": "32:24",
      "text": "we'll draw it out and some particular"
    },
    {
      "start": "32:24",
      "end": "32:31",
      "text": "we'll draw it out and some particular Reds e which is the maximum weighted"
    },
    {
      "start": "32:31",
      "end": "32:31",
      "text": "Reds e which is the maximum weighted"
    },
    {
      "start": "32:31",
      "end": "32:33",
      "text": "Reds e which is the maximum weighted edge of some particular cycle is present"
    },
    {
      "start": "32:33",
      "end": "32:33",
      "text": "edge of some particular cycle is present"
    },
    {
      "start": "32:33",
      "end": "32:35",
      "text": "edge of some particular cycle is present ok suppose this was that particular edge"
    },
    {
      "start": "32:35",
      "end": "32:35",
      "text": "ok suppose this was that particular edge"
    },
    {
      "start": "32:35",
      "end": "32:38",
      "text": "ok suppose this was that particular edge if you remove that particular edge that"
    },
    {
      "start": "32:38",
      "end": "32:38",
      "text": "if you remove that particular edge that"
    },
    {
      "start": "32:38",
      "end": "32:40",
      "text": "if you remove that particular edge that tree will automatically break into two"
    },
    {
      "start": "32:40",
      "end": "32:40",
      "text": "tree will automatically break into two"
    },
    {
      "start": "32:40",
      "end": "32:42",
      "text": "tree will automatically break into two parts okay so that's going to naturally"
    },
    {
      "start": "32:42",
      "end": "32:42",
      "text": "parts okay so that's going to naturally"
    },
    {
      "start": "32:42",
      "end": "32:46",
      "text": "parts okay so that's going to naturally give us a cut involving or a partition"
    },
    {
      "start": "32:46",
      "end": "32:46",
      "text": "give us a cut involving or a partition"
    },
    {
      "start": "32:46",
      "end": "32:48",
      "text": "give us a cut involving or a partition of the vertices so let's say we're going"
    },
    {
      "start": "32:48",
      "end": "32:48",
      "text": "of the vertices so let's say we're going"
    },
    {
      "start": "32:48",
      "end": "32:51",
      "text": "of the vertices so let's say we're going to draw a tree like this this is our"
    },
    {
      "start": "32:51",
      "end": "32:51",
      "text": "to draw a tree like this this is our"
    },
    {
      "start": "32:51",
      "end": "32:55",
      "text": "to draw a tree like this this is our edge UV and there are no other edge"
    },
    {
      "start": "32:55",
      "end": "32:55",
      "text": "edge UV and there are no other edge"
    },
    {
      "start": "32:55",
      "end": "32:59",
      "text": "edge UV and there are no other edge going from side a to side B in the tree"
    },
    {
      "start": "32:59",
      "end": "32:59",
      "text": "going from side a to side B in the tree"
    },
    {
      "start": "32:59",
      "end": "33:02",
      "text": "going from side a to side B in the tree so there are all these other vertices"
    },
    {
      "start": "33:02",
      "end": "33:02",
      "text": "so there are all these other vertices"
    },
    {
      "start": "33:02",
      "end": "33:05",
      "text": "so there are all these other vertices they are all connected to you and there"
    },
    {
      "start": "33:05",
      "end": "33:05",
      "text": "they are all connected to you and there"
    },
    {
      "start": "33:05",
      "end": "33:06",
      "text": "they are all connected to you and there are all these other vertices which are"
    },
    {
      "start": "33:06",
      "end": "33:06",
      "text": "are all these other vertices which are"
    },
    {
      "start": "33:06",
      "end": "33:10",
      "text": "are all these other vertices which are connected to the well that's our tree"
    },
    {
      "start": "33:10",
      "end": "33:10",
      "text": "connected to the well that's our tree"
    },
    {
      "start": "33:10",
      "end": "33:13",
      "text": "connected to the well that's our tree our minimal spanning tree was something"
    },
    {
      "start": "33:13",
      "end": "33:13",
      "text": "our minimal spanning tree was something"
    },
    {
      "start": "33:13",
      "end": "33:15",
      "text": "our minimal spanning tree was something of this kind and if you remove UV then"
    },
    {
      "start": "33:15",
      "end": "33:15",
      "text": "of this kind and if you remove UV then"
    },
    {
      "start": "33:15",
      "end": "33:19",
      "text": "of this kind and if you remove UV then that disconnects the graph but now if"
    },
    {
      "start": "33:19",
      "end": "33:19",
      "text": "that disconnects the graph but now if"
    },
    {
      "start": "33:19",
      "end": "33:23",
      "text": "that disconnects the graph but now if you think of the original cycle C of"
    },
    {
      "start": "33:23",
      "end": "33:23",
      "text": "you think of the original cycle C of"
    },
    {
      "start": "33:23",
      "end": "33:26",
      "text": "you think of the original cycle C of which UV was a maximum edge if you look"
    },
    {
      "start": "33:26",
      "end": "33:26",
      "text": "which UV was a maximum edge if you look"
    },
    {
      "start": "33:26",
      "end": "33:29",
      "text": "which UV was a maximum edge if you look at that cycle and trace out that cycle"
    },
    {
      "start": "33:29",
      "end": "33:29",
      "text": "at that cycle and trace out that cycle"
    },
    {
      "start": "33:29",
      "end": "33:31",
      "text": "at that cycle and trace out that cycle starting at the edge UV then at some"
    },
    {
      "start": "33:31",
      "end": "33:31",
      "text": "starting at the edge UV then at some"
    },
    {
      "start": "33:31",
      "end": "33:34",
      "text": "starting at the edge UV then at some point there should be an edge going back"
    },
    {
      "start": "33:34",
      "end": "33:34",
      "text": "point there should be an edge going back"
    },
    {
      "start": "33:34",
      "end": "33:39",
      "text": "point there should be an edge going back into I'm going from B to a the cycle of"
    },
    {
      "start": "33:39",
      "end": "33:40",
      "text": "into I'm going from B to a the cycle of"
    },
    {
      "start": "33:40",
      "end": "33:44",
      "text": "into I'm going from B to a the cycle of which the edge E was part of must have"
    },
    {
      "start": "33:44",
      "end": "33:44",
      "text": "which the edge E was part of must have"
    },
    {
      "start": "33:44",
      "end": "33:47",
      "text": "which the edge E was part of must have an edge which goes from B to a ok and"
    },
    {
      "start": "33:47",
      "end": "33:47",
      "text": "an edge which goes from B to a ok and"
    },
    {
      "start": "33:47",
      "end": "33:49",
      "text": "an edge which goes from B to a ok and clearly this is not going to be an edge"
    },
    {
      "start": "33:49",
      "end": "33:49",
      "text": "clearly this is not going to be an edge"
    },
    {
      "start": "33:49",
      "end": "33:54",
      "text": "clearly this is not going to be an edge that was part of the treaty because"
    },
    {
      "start": "33:54",
      "end": "33:54",
      "text": "that was part of the treaty because"
    },
    {
      "start": "33:54",
      "end": "33:56",
      "text": "that was part of the treaty because the treaty did not have any edge going"
    },
    {
      "start": "33:56",
      "end": "33:57",
      "text": "the treaty did not have any edge going"
    },
    {
      "start": "33:57",
      "end": "34:01",
      "text": "the treaty did not have any edge going from side a to side B other than the UV"
    },
    {
      "start": "34:01",
      "end": "34:01",
      "text": "from side a to side B other than the UV"
    },
    {
      "start": "34:01",
      "end": "34:05",
      "text": "from side a to side B other than the UV edge okay so let's call this edge as T"
    },
    {
      "start": "34:05",
      "end": "34:05",
      "text": "edge okay so let's call this edge as T"
    },
    {
      "start": "34:05",
      "end": "34:08",
      "text": "edge okay so let's call this edge as T prime okay and since this is part of the"
    },
    {
      "start": "34:08",
      "end": "34:08",
      "text": "prime okay and since this is part of the"
    },
    {
      "start": "34:08",
      "end": "34:11",
      "text": "prime okay and since this is part of the cycle weight of a prime this is going to"
    },
    {
      "start": "34:11",
      "end": "34:11",
      "text": "cycle weight of a prime this is going to"
    },
    {
      "start": "34:11",
      "end": "34:14",
      "text": "cycle weight of a prime this is going to be strictly less than weight of UV again"
    },
    {
      "start": "34:14",
      "end": "34:14",
      "text": "be strictly less than weight of UV again"
    },
    {
      "start": "34:14",
      "end": "34:20",
      "text": "be strictly less than weight of UV again replacing the edge E Prime replacing the"
    },
    {
      "start": "34:20",
      "end": "34:20",
      "text": "replacing the edge E Prime replacing the"
    },
    {
      "start": "34:20",
      "end": "34:22",
      "text": "replacing the edge E Prime replacing the edge E with E Prime we get a tree of"
    },
    {
      "start": "34:22",
      "end": "34:22",
      "text": "edge E with E Prime we get a tree of"
    },
    {
      "start": "34:22",
      "end": "34:27",
      "text": "edge E with E Prime we get a tree of strictly less weight okay so we can"
    },
    {
      "start": "34:27",
      "end": "34:27",
      "text": "strictly less weight okay so we can"
    },
    {
      "start": "34:27",
      "end": "34:32",
      "text": "strictly less weight okay so we can conclude that T is not minimal it's not"
    },
    {
      "start": "34:32",
      "end": "34:32",
      "text": "conclude that T is not minimal it's not"
    },
    {
      "start": "34:32",
      "end": "34:34",
      "text": "conclude that T is not minimal it's not the minimal spanning tree okay and"
    },
    {
      "start": "34:34",
      "end": "34:34",
      "text": "the minimal spanning tree okay and"
    },
    {
      "start": "34:34",
      "end": "34:38",
      "text": "the minimal spanning tree okay and therefore our assumption is"
    },
    {
      "start": "34:38",
      "end": "34:38",
      "text": "therefore our assumption is"
    },
    {
      "start": "34:38",
      "end": "34:42",
      "text": "therefore our assumption is contradictory okay so we know that cycle"
    },
    {
      "start": "34:42",
      "end": "34:42",
      "text": "contradictory okay so we know that cycle"
    },
    {
      "start": "34:42",
      "end": "34:44",
      "text": "contradictory okay so we know that cycle property is also true so now equipped"
    },
    {
      "start": "34:44",
      "end": "34:44",
      "text": "property is also true so now equipped"
    },
    {
      "start": "34:44",
      "end": "34:46",
      "text": "property is also true so now equipped with these two properties cycling"
    },
    {
      "start": "34:46",
      "end": "34:46",
      "text": "with these two properties cycling"
    },
    {
      "start": "34:46",
      "end": "34:49",
      "text": "with these two properties cycling property and cut property we will"
    },
    {
      "start": "34:49",
      "end": "34:49",
      "text": "property and cut property we will"
    },
    {
      "start": "34:49",
      "end": "34:52",
      "text": "property and cut property we will describe a couple of algorithms to solve"
    },
    {
      "start": "34:52",
      "end": "34:52",
      "text": "describe a couple of algorithms to solve"
    },
    {
      "start": "34:52",
      "end": "34:54",
      "text": "describe a couple of algorithms to solve the minimal spanning tree problem okay"
    },
    {
      "start": "34:54",
      "end": "34:54",
      "text": "the minimal spanning tree problem okay"
    },
    {
      "start": "34:54",
      "end": "34:55",
      "text": "the minimal spanning tree problem okay when while spreading through problem is"
    },
    {
      "start": "34:55",
      "end": "34:55",
      "text": "when while spreading through problem is"
    },
    {
      "start": "34:55",
      "end": "34:58",
      "text": "when while spreading through problem is you're given some particular graph some"
    },
    {
      "start": "34:58",
      "end": "34:58",
      "text": "you're given some particular graph some"
    },
    {
      "start": "34:58",
      "end": "35:00",
      "text": "you're given some particular graph some particular weighted graph and you need"
    },
    {
      "start": "35:00",
      "end": "35:00",
      "text": "particular weighted graph and you need"
    },
    {
      "start": "35:00",
      "end": "35:03",
      "text": "particular weighted graph and you need to compute the minimal spanning tree and"
    },
    {
      "start": "35:03",
      "end": "35:03",
      "text": "to compute the minimal spanning tree and"
    },
    {
      "start": "35:03",
      "end": "35:06",
      "text": "to compute the minimal spanning tree and these are classic algorithms the first"
    },
    {
      "start": "35:06",
      "end": "35:06",
      "text": "these are classic algorithms the first"
    },
    {
      "start": "35:06",
      "end": "35:08",
      "text": "these are classic algorithms the first algorithm is called as kruskal's"
    },
    {
      "start": "35:08",
      "end": "35:08",
      "text": "algorithm is called as kruskal's"
    },
    {
      "start": "35:08",
      "end": "35:13",
      "text": "algorithm is called as kruskal's algorithm we won't bother about the data"
    },
    {
      "start": "35:13",
      "end": "35:13",
      "text": "algorithm we won't bother about the data"
    },
    {
      "start": "35:13",
      "end": "35:15",
      "text": "algorithm we won't bother about the data structures used in these algorithms but"
    },
    {
      "start": "35:15",
      "end": "35:15",
      "text": "structures used in these algorithms but"
    },
    {
      "start": "35:15",
      "end": "35:17",
      "text": "structures used in these algorithms but instead we'll just look at the steps of"
    },
    {
      "start": "35:17",
      "end": "35:17",
      "text": "instead we'll just look at the steps of"
    },
    {
      "start": "35:17",
      "end": "35:20",
      "text": "instead we'll just look at the steps of the algorithm so crystals algorithm does"
    },
    {
      "start": "35:20",
      "end": "35:20",
      "text": "the algorithm so crystals algorithm does"
    },
    {
      "start": "35:20",
      "end": "35:22",
      "text": "the algorithm so crystals algorithm does the following you look at all the edges"
    },
    {
      "start": "35:22",
      "end": "35:22",
      "text": "the following you look at all the edges"
    },
    {
      "start": "35:22",
      "end": "35:25",
      "text": "the following you look at all the edges sorted by their weights in increasing"
    },
    {
      "start": "35:25",
      "end": "35:25",
      "text": "sorted by their weights in increasing"
    },
    {
      "start": "35:25",
      "end": "35:32",
      "text": "sorted by their weights in increasing order okay so consider edges in"
    },
    {
      "start": "35:32",
      "end": "35:32",
      "text": "order okay so consider edges in"
    },
    {
      "start": "35:32",
      "end": "35:37",
      "text": "order okay so consider edges in increasing order of their weights"
    },
    {
      "start": "35:41",
      "end": "35:41",
      "text": "okay so e1 e2 and so on"
    },
    {
      "start": "35:41",
      "end": "35:43",
      "text": "okay so e1 e2 and so on there were M edges then you look at it"
    },
    {
      "start": "35:43",
      "end": "35:43",
      "text": "there were M edges then you look at it"
    },
    {
      "start": "35:43",
      "end": "35:47",
      "text": "there were M edges then you look at it just even e2 yep and keep on adding this"
    },
    {
      "start": "35:47",
      "end": "35:47",
      "text": "just even e2 yep and keep on adding this"
    },
    {
      "start": "35:47",
      "end": "35:49",
      "text": "just even e2 yep and keep on adding this into the tree"
    },
    {
      "start": "35:49",
      "end": "35:49",
      "text": "into the tree"
    },
    {
      "start": "35:49",
      "end": "35:51",
      "text": "into the tree okay so initially you have these n"
    },
    {
      "start": "35:51",
      "end": "35:51",
      "text": "okay so initially you have these n"
    },
    {
      "start": "35:51",
      "end": "35:53",
      "text": "okay so initially you have these n vertices which we can think of as"
    },
    {
      "start": "35:53",
      "end": "35:53",
      "text": "vertices which we can think of as"
    },
    {
      "start": "35:53",
      "end": "35:56",
      "text": "vertices which we can think of as isolated vertices first vertex first"
    },
    {
      "start": "35:56",
      "end": "35:56",
      "text": "isolated vertices first vertex first"
    },
    {
      "start": "35:56",
      "end": "35:59",
      "text": "isolated vertices first vertex first edge that you add is even and then maybe"
    },
    {
      "start": "35:59",
      "end": "35:59",
      "text": "edge that you add is even and then maybe"
    },
    {
      "start": "35:59",
      "end": "36:01",
      "text": "edge that you add is even and then maybe you will add e to and so on each time"
    },
    {
      "start": "36:01",
      "end": "36:01",
      "text": "you will add e to and so on each time"
    },
    {
      "start": "36:01",
      "end": "36:04",
      "text": "you will add e to and so on each time you are adding an edge you will check if"
    },
    {
      "start": "36:04",
      "end": "36:04",
      "text": "you are adding an edge you will check if"
    },
    {
      "start": "36:04",
      "end": "36:07",
      "text": "you are adding an edge you will check if there is a cycle formed by the edges"
    },
    {
      "start": "36:07",
      "end": "36:07",
      "text": "there is a cycle formed by the edges"
    },
    {
      "start": "36:07",
      "end": "36:09",
      "text": "there is a cycle formed by the edges that are already"
    },
    {
      "start": "36:09",
      "end": "36:09",
      "text": "that are already"
    },
    {
      "start": "36:09",
      "end": "36:11",
      "text": "that are already so suppose even need to and then you"
    },
    {
      "start": "36:11",
      "end": "36:11",
      "text": "so suppose even need to and then you"
    },
    {
      "start": "36:11",
      "end": "36:14",
      "text": "so suppose even need to and then you added III and suppose II for was between"
    },
    {
      "start": "36:14",
      "end": "36:14",
      "text": "added III and suppose II for was between"
    },
    {
      "start": "36:14",
      "end": "36:17",
      "text": "added III and suppose II for was between these then you are not going to add it"
    },
    {
      "start": "36:17",
      "end": "36:17",
      "text": "these then you are not going to add it"
    },
    {
      "start": "36:17",
      "end": "36:20",
      "text": "these then you are not going to add it for okay so consider the edges in these"
    },
    {
      "start": "36:20",
      "end": "36:20",
      "text": "for okay so consider the edges in these"
    },
    {
      "start": "36:20",
      "end": "36:29",
      "text": "for okay so consider the edges in these orders keep adding them without creating"
    },
    {
      "start": "36:29",
      "end": "36:29",
      "text": "orders keep adding them without creating"
    },
    {
      "start": "36:29",
      "end": "36:34",
      "text": "orders keep adding them without creating cycles okay and in the end if you had"
    },
    {
      "start": "36:34",
      "end": "36:34",
      "text": "cycles okay and in the end if you had"
    },
    {
      "start": "36:34",
      "end": "36:36",
      "text": "cycles okay and in the end if you had started with a connected graph you will"
    },
    {
      "start": "36:36",
      "end": "36:36",
      "text": "started with a connected graph you will"
    },
    {
      "start": "36:36",
      "end": "36:39",
      "text": "started with a connected graph you will get the minimal spanning tree okay why"
    },
    {
      "start": "36:39",
      "end": "36:39",
      "text": "get the minimal spanning tree okay why"
    },
    {
      "start": "36:39",
      "end": "36:43",
      "text": "get the minimal spanning tree okay why is this algorithm correct the reason is"
    },
    {
      "start": "36:43",
      "end": "36:43",
      "text": "is this algorithm correct the reason is"
    },
    {
      "start": "36:43",
      "end": "36:47",
      "text": "is this algorithm correct the reason is the sightly property now every edge that"
    },
    {
      "start": "36:47",
      "end": "36:47",
      "text": "the sightly property now every edge that"
    },
    {
      "start": "36:47",
      "end": "36:51",
      "text": "the sightly property now every edge that we have removed from this particular"
    },
    {
      "start": "36:51",
      "end": "36:51",
      "text": "we have removed from this particular"
    },
    {
      "start": "36:51",
      "end": "36:55",
      "text": "we have removed from this particular tree is an edge which deserved to be"
    },
    {
      "start": "36:55",
      "end": "36:55",
      "text": "tree is an edge which deserved to be"
    },
    {
      "start": "36:55",
      "end": "36:57",
      "text": "tree is an edge which deserved to be removed because that cannot be part of"
    },
    {
      "start": "36:57",
      "end": "36:57",
      "text": "removed because that cannot be part of"
    },
    {
      "start": "36:57",
      "end": "37:00",
      "text": "removed because that cannot be part of any minimal spanning tree this also"
    },
    {
      "start": "37:00",
      "end": "37:00",
      "text": "any minimal spanning tree this also"
    },
    {
      "start": "37:00",
      "end": "37:03",
      "text": "any minimal spanning tree this also tells us that if the edge weights were"
    },
    {
      "start": "37:03",
      "end": "37:03",
      "text": "tells us that if the edge weights were"
    },
    {
      "start": "37:03",
      "end": "37:05",
      "text": "tells us that if the edge weights were distinct that gives rise to unique"
    },
    {
      "start": "37:05",
      "end": "37:05",
      "text": "distinct that gives rise to unique"
    },
    {
      "start": "37:05",
      "end": "37:07",
      "text": "distinct that gives rise to unique ordering on the edges and therefore it"
    },
    {
      "start": "37:07",
      "end": "37:07",
      "text": "ordering on the edges and therefore it"
    },
    {
      "start": "37:07",
      "end": "37:08",
      "text": "ordering on the edges and therefore it will create a unique minimal spanning"
    },
    {
      "start": "37:08",
      "end": "37:08",
      "text": "will create a unique minimal spanning"
    },
    {
      "start": "37:08",
      "end": "37:12",
      "text": "will create a unique minimal spanning tree okay so on graphs where the edge"
    },
    {
      "start": "37:12",
      "end": "37:12",
      "text": "tree okay so on graphs where the edge"
    },
    {
      "start": "37:12",
      "end": "37:14",
      "text": "tree okay so on graphs where the edge weights are distinct there is precisely"
    },
    {
      "start": "37:14",
      "end": "37:14",
      "text": "weights are distinct there is precisely"
    },
    {
      "start": "37:14",
      "end": "37:16",
      "text": "weights are distinct there is precisely one minimal spanning tree and that can"
    },
    {
      "start": "37:16",
      "end": "37:16",
      "text": "one minimal spanning tree and that can"
    },
    {
      "start": "37:16",
      "end": "37:19",
      "text": "one minimal spanning tree and that can be found by this method methods"
    },
    {
      "start": "37:19",
      "end": "37:19",
      "text": "be found by this method methods"
    },
    {
      "start": "37:19",
      "end": "37:21",
      "text": "be found by this method methods correctness restaurants the fact that"
    },
    {
      "start": "37:21",
      "end": "37:21",
      "text": "correctness restaurants the fact that"
    },
    {
      "start": "37:21",
      "end": "37:23",
      "text": "correctness restaurants the fact that all the edges that we have removed in"
    },
    {
      "start": "37:23",
      "end": "37:23",
      "text": "all the edges that we have removed in"
    },
    {
      "start": "37:23",
      "end": "37:27",
      "text": "all the edges that we have removed in the process to create that tree can I"
    },
    {
      "start": "37:27",
      "end": "37:27",
      "text": "the process to create that tree can I"
    },
    {
      "start": "37:27",
      "end": "37:28",
      "text": "the process to create that tree can I mean those are the edges which cannot be"
    },
    {
      "start": "37:28",
      "end": "37:28",
      "text": "mean those are the edges which cannot be"
    },
    {
      "start": "37:28",
      "end": "37:33",
      "text": "mean those are the edges which cannot be present in any minimal spanning tree"
    },
    {
      "start": "37:39",
      "end": "37:39",
      "text": "okay so if we look at our original graph"
    },
    {
      "start": "37:39",
      "end": "37:42",
      "text": "okay so if we look at our original graph okay so if we sorted the edges according"
    },
    {
      "start": "37:42",
      "end": "37:42",
      "text": "okay so if we sorted the edges according"
    },
    {
      "start": "37:42",
      "end": "37:44",
      "text": "okay so if we sorted the edges according to the edge weights the edge weights"
    },
    {
      "start": "37:44",
      "end": "37:44",
      "text": "to the edge weights the edge weights"
    },
    {
      "start": "37:44",
      "end": "37:57",
      "text": "to the edge weights the edge weights would have been 1 2 2 3 4 4 5 6 ok we"
    },
    {
      "start": "37:57",
      "end": "37:57",
      "text": "would have been 1 2 2 3 4 4 5 6 ok we"
    },
    {
      "start": "37:57",
      "end": "38:00",
      "text": "would have been 1 2 2 3 4 4 5 6 ok we need to have some way of identifying"
    },
    {
      "start": "38:00",
      "end": "38:00",
      "text": "need to have some way of identifying"
    },
    {
      "start": "38:00",
      "end": "38:03",
      "text": "need to have some way of identifying which was the weight to edge okay but if"
    },
    {
      "start": "38:03",
      "end": "38:03",
      "text": "which was the weight to edge okay but if"
    },
    {
      "start": "38:03",
      "end": "38:05",
      "text": "which was the weight to edge okay but if you look at weight 1 &amp; 2 these edges are"
    },
    {
      "start": "38:05",
      "end": "38:05",
      "text": "you look at weight 1 &amp; 2 these edges are"
    },
    {
      "start": "38:05",
      "end": "38:08",
      "text": "you look at weight 1 &amp; 2 these edges are will automatically be added this also"
    },
    {
      "start": "38:08",
      "end": "38:08",
      "text": "will automatically be added this also"
    },
    {
      "start": "38:08",
      "end": "38:10",
      "text": "will automatically be added this also can be added and you add 3 there's a"
    },
    {
      "start": "38:10",
      "end": "38:10",
      "text": "can be added and you add 3 there's a"
    },
    {
      "start": "38:10",
      "end": "38:11",
      "text": "can be added and you add 3 there's a cycle so that's not going to be added"
    },
    {
      "start": "38:11",
      "end": "38:11",
      "text": "cycle so that's not going to be added"
    },
    {
      "start": "38:11",
      "end": "38:14",
      "text": "cycle so that's not going to be added when you add 4 that's not going to"
    },
    {
      "start": "38:14",
      "end": "38:14",
      "text": "when you add 4 that's not going to"
    },
    {
      "start": "38:14",
      "end": "38:16",
      "text": "when you add 4 that's not going to create a cycle that gets added the next"
    },
    {
      "start": "38:16",
      "end": "38:16",
      "text": "create a cycle that gets added the next"
    },
    {
      "start": "38:16",
      "end": "38:18",
      "text": "create a cycle that gets added the next 4 is also going to be added and 5 &amp; 6"
    },
    {
      "start": "38:18",
      "end": "38:18",
      "text": "4 is also going to be added and 5 &amp; 6"
    },
    {
      "start": "38:18",
      "end": "38:20",
      "text": "4 is also going to be added and 5 &amp; 6 are going to create cycles okay and"
    },
    {
      "start": "38:20",
      "end": "38:20",
      "text": "are going to create cycles okay and"
    },
    {
      "start": "38:20",
      "end": "38:22",
      "text": "are going to create cycles okay and therefore they will not be"
    },
    {
      "start": "38:22",
      "end": "38:22",
      "text": "therefore they will not be"
    },
    {
      "start": "38:22",
      "end": "38:25",
      "text": "therefore they will not be and therefore this example verified that"
    },
    {
      "start": "38:25",
      "end": "38:25",
      "text": "and therefore this example verified that"
    },
    {
      "start": "38:25",
      "end": "38:28",
      "text": "and therefore this example verified that the tree obtained is indeed the minimal"
    },
    {
      "start": "38:28",
      "end": "38:28",
      "text": "the tree obtained is indeed the minimal"
    },
    {
      "start": "38:28",
      "end": "38:32",
      "text": "the tree obtained is indeed the minimal spanning tree prims algorithm is also a"
    },
    {
      "start": "38:32",
      "end": "38:32",
      "text": "spanning tree prims algorithm is also a"
    },
    {
      "start": "38:32",
      "end": "38:34",
      "text": "spanning tree prims algorithm is also a very simple way of constructing the"
    },
    {
      "start": "38:34",
      "end": "38:34",
      "text": "very simple way of constructing the"
    },
    {
      "start": "38:34",
      "end": "38:43",
      "text": "very simple way of constructing the minimal spanning tree"
    },
    {
      "start": "38:46",
      "end": "38:46",
      "text": "so you started in the algorithm works in"
    },
    {
      "start": "38:46",
      "end": "38:47",
      "text": "so you started in the algorithm works in the following way you start at one"
    },
    {
      "start": "38:47",
      "end": "38:47",
      "text": "the following way you start at one"
    },
    {
      "start": "38:47",
      "end": "38:50",
      "text": "the following way you start at one particular vertex and look at all its"
    },
    {
      "start": "38:50",
      "end": "38:50",
      "text": "particular vertex and look at all its"
    },
    {
      "start": "38:50",
      "end": "38:52",
      "text": "particular vertex and look at all its neighbors and amongst the neighbors add"
    },
    {
      "start": "38:52",
      "end": "38:52",
      "text": "neighbors and amongst the neighbors add"
    },
    {
      "start": "38:52",
      "end": "38:58",
      "text": "neighbors and amongst the neighbors add the least weighted edge okay and keep on"
    },
    {
      "start": "38:58",
      "end": "38:58",
      "text": "the least weighted edge okay and keep on"
    },
    {
      "start": "38:58",
      "end": "39:01",
      "text": "the least weighted edge okay and keep on and then let's say if you have added one"
    },
    {
      "start": "39:01",
      "end": "39:01",
      "text": "and then let's say if you have added one"
    },
    {
      "start": "39:01",
      "end": "39:04",
      "text": "and then let's say if you have added one particular vertex now you consider this"
    },
    {
      "start": "39:04",
      "end": "39:04",
      "text": "particular vertex now you consider this"
    },
    {
      "start": "39:04",
      "end": "39:06",
      "text": "particular vertex now you consider this as a set and from this collection find"
    },
    {
      "start": "39:06",
      "end": "39:06",
      "text": "as a set and from this collection find"
    },
    {
      "start": "39:06",
      "end": "39:08",
      "text": "as a set and from this collection find out the least weight arrange and then"
    },
    {
      "start": "39:08",
      "end": "39:08",
      "text": "out the least weight arrange and then"
    },
    {
      "start": "39:08",
      "end": "39:11",
      "text": "out the least weight arrange and then add that and then consider those three"
    },
    {
      "start": "39:11",
      "end": "39:11",
      "text": "add that and then consider those three"
    },
    {
      "start": "39:11",
      "end": "39:12",
      "text": "add that and then consider those three as a set and add the least weight edge"
    },
    {
      "start": "39:12",
      "end": "39:12",
      "text": "as a set and add the least weight edge"
    },
    {
      "start": "39:12",
      "end": "39:15",
      "text": "as a set and add the least weight edge and so on okay so at any stage you have"
    },
    {
      "start": "39:15",
      "end": "39:15",
      "text": "and so on okay so at any stage you have"
    },
    {
      "start": "39:15",
      "end": "39:18",
      "text": "and so on okay so at any stage you have a collection of edges collection of"
    },
    {
      "start": "39:18",
      "end": "39:18",
      "text": "a collection of edges collection of"
    },
    {
      "start": "39:18",
      "end": "39:20",
      "text": "a collection of edges collection of vertices which are which forms a"
    },
    {
      "start": "39:20",
      "end": "39:20",
      "text": "vertices which are which forms a"
    },
    {
      "start": "39:20",
      "end": "39:22",
      "text": "vertices which are which forms a connected component and from this"
    },
    {
      "start": "39:22",
      "end": "39:22",
      "text": "connected component and from this"
    },
    {
      "start": "39:22",
      "end": "39:24",
      "text": "connected component and from this component look at the least weighted"
    },
    {
      "start": "39:24",
      "end": "39:24",
      "text": "component look at the least weighted"
    },
    {
      "start": "39:24",
      "end": "39:26",
      "text": "component look at the least weighted outgoing edge and that's what we added"
    },
    {
      "start": "39:26",
      "end": "39:26",
      "text": "outgoing edge and that's what we added"
    },
    {
      "start": "39:26",
      "end": "39:29",
      "text": "outgoing edge and that's what we added to expand this particular tree and in"
    },
    {
      "start": "39:29",
      "end": "39:29",
      "text": "to expand this particular tree and in"
    },
    {
      "start": "39:29",
      "end": "39:31",
      "text": "to expand this particular tree and in the end you will get the you will get a"
    },
    {
      "start": "39:31",
      "end": "39:31",
      "text": "the end you will get the you will get a"
    },
    {
      "start": "39:31",
      "end": "39:33",
      "text": "the end you will get the you will get a tree and that tree is guaranteed to be"
    },
    {
      "start": "39:33",
      "end": "39:33",
      "text": "tree and that tree is guaranteed to be"
    },
    {
      "start": "39:33",
      "end": "39:35",
      "text": "tree and that tree is guaranteed to be the minimal spanning tree why is it the"
    },
    {
      "start": "39:35",
      "end": "39:35",
      "text": "the minimal spanning tree why is it the"
    },
    {
      "start": "39:35",
      "end": "39:37",
      "text": "the minimal spanning tree why is it the minimal spanning tree because each edge"
    },
    {
      "start": "39:37",
      "end": "39:37",
      "text": "minimal spanning tree because each edge"
    },
    {
      "start": "39:37",
      "end": "39:41",
      "text": "minimal spanning tree because each edge that you add at any given stage is the"
    },
    {
      "start": "39:41",
      "end": "39:41",
      "text": "that you add at any given stage is the"
    },
    {
      "start": "39:41",
      "end": "39:44",
      "text": "that you add at any given stage is the minimum weighted edge of a certain cut"
    },
    {
      "start": "39:44",
      "end": "39:44",
      "text": "minimum weighted edge of a certain cut"
    },
    {
      "start": "39:44",
      "end": "39:47",
      "text": "minimum weighted edge of a certain cut so when you added the first edge if you"
    },
    {
      "start": "39:47",
      "end": "39:47",
      "text": "so when you added the first edge if you"
    },
    {
      "start": "39:47",
      "end": "39:49",
      "text": "so when you added the first edge if you look at the cut consisting of just that"
    },
    {
      "start": "39:49",
      "end": "39:49",
      "text": "look at the cut consisting of just that"
    },
    {
      "start": "39:49",
      "end": "39:51",
      "text": "look at the cut consisting of just that one vertex and everything else in the"
    },
    {
      "start": "39:51",
      "end": "39:51",
      "text": "one vertex and everything else in the"
    },
    {
      "start": "39:51",
      "end": "39:54",
      "text": "one vertex and everything else in the other side okay you have a valid reason"
    },
    {
      "start": "39:54",
      "end": "39:54",
      "text": "other side okay you have a valid reason"
    },
    {
      "start": "39:54",
      "end": "39:56",
      "text": "other side okay you have a valid reason for adding the particular is it you've"
    },
    {
      "start": "39:56",
      "end": "39:56",
      "text": "for adding the particular is it you've"
    },
    {
      "start": "39:56",
      "end": "39:56",
      "text": "for adding the particular is it you've got it"
    },
    {
      "start": "39:56",
      "end": "39:56",
      "text": "got it"
    },
    {
      "start": "39:56",
      "end": "39:59",
      "text": "got it at any particular stage you have some"
    },
    {
      "start": "39:59",
      "end": "39:59",
      "text": "at any particular stage you have some"
    },
    {
      "start": "39:59",
      "end": "40:01",
      "text": "at any particular stage you have some partial tree and those partial trees"
    },
    {
      "start": "40:01",
      "end": "40:01",
      "text": "partial tree and those partial trees"
    },
    {
      "start": "40:01",
      "end": "40:04",
      "text": "partial tree and those partial trees define a set of vertices and the"
    },
    {
      "start": "40:04",
      "end": "40:04",
      "text": "define a set of vertices and the"
    },
    {
      "start": "40:04",
      "end": "40:06",
      "text": "define a set of vertices and the complement of that would be the other"
    },
    {
      "start": "40:06",
      "end": "40:06",
      "text": "complement of that would be the other"
    },
    {
      "start": "40:06",
      "end": "40:09",
      "text": "complement of that would be the other part so if you cancel this is a cut a be"
    },
    {
      "start": "40:09",
      "end": "40:09",
      "text": "part so if you cancel this is a cut a be"
    },
    {
      "start": "40:09",
      "end": "40:11",
      "text": "part so if you cancel this is a cut a be the next edge that you are going to add"
    },
    {
      "start": "40:11",
      "end": "40:11",
      "text": "the next edge that you are going to add"
    },
    {
      "start": "40:11",
      "end": "40:13",
      "text": "the next edge that you are going to add is the minimum weighted edge across the"
    },
    {
      "start": "40:13",
      "end": "40:13",
      "text": "is the minimum weighted edge across the"
    },
    {
      "start": "40:13",
      "end": "40:15",
      "text": "is the minimum weighted edge across the cut a B and therefore by cut property"
    },
    {
      "start": "40:15",
      "end": "40:15",
      "text": "cut a B and therefore by cut property"
    },
    {
      "start": "40:15",
      "end": "40:18",
      "text": "cut a B and therefore by cut property that is an edge which deserve to be"
    },
    {
      "start": "40:18",
      "end": "40:18",
      "text": "that is an edge which deserve to be"
    },
    {
      "start": "40:18",
      "end": "40:19",
      "text": "that is an edge which deserve to be added to every minimal spanning tree"
    },
    {
      "start": "40:19",
      "end": "40:19",
      "text": "added to every minimal spanning tree"
    },
    {
      "start": "40:19",
      "end": "40:22",
      "text": "added to every minimal spanning tree okay so we've learnt two algorithms to"
    },
    {
      "start": "40:22",
      "end": "40:22",
      "text": "okay so we've learnt two algorithms to"
    },
    {
      "start": "40:22",
      "end": "40:24",
      "text": "okay so we've learnt two algorithms to compute the minimum spanning tree and"
    },
    {
      "start": "40:24",
      "end": "40:24",
      "text": "compute the minimum spanning tree and"
    },
    {
      "start": "40:24",
      "end": "40:25",
      "text": "compute the minimum spanning tree and the correctness of both these algorithm"
    },
    {
      "start": "40:25",
      "end": "40:25",
      "text": "the correctness of both these algorithm"
    },
    {
      "start": "40:25",
      "end": "40:28",
      "text": "the correctness of both these algorithm comes from simple properties simply"
    },
    {
      "start": "40:28",
      "end": "40:28",
      "text": "comes from simple properties simply"
    },
    {
      "start": "40:28",
      "end": "40:29",
      "text": "comes from simple properties simply graphs properties like cut property"
    },
    {
      "start": "40:29",
      "end": "40:29",
      "text": "graphs properties like cut property"
    },
    {
      "start": "40:29",
      "end": "40:32",
      "text": "graphs properties like cut property cycle property we'll stop here for"
    },
    {
      "start": "40:32",
      "end": "40:32",
      "text": "cycle property we'll stop here for"
    },
    {
      "start": "40:32",
      "end": "40:35",
      "text": "cycle property we'll stop here for today's like we will end today's lecture"
    },
    {
      "start": "40:35",
      "end": "40:35",
      "text": "today's like we will end today's lecture"
    },
    {
      "start": "40:35",
      "end": "40:38",
      "text": "today's like we will end today's lecture here it will continue studying other"
    },
    {
      "start": "40:38",
      "end": "40:38",
      "text": "here it will continue studying other"
    },
    {
      "start": "40:38",
      "end": "40:40",
      "text": "here it will continue studying other properties of graphs in the coming"
    },
    {
      "start": "40:40",
      "end": "40:40",
      "text": "properties of graphs in the coming"
    },
    {
      "start": "40:40",
      "end": "40:47",
      "text": "properties of graphs in the coming lectures"
    }
  ],
  "timestamped": true
}